/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Cimage-component.js&modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Csrc%5Ccomponents%5CHeroSection.tsx&modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Csrc%5Ccomponents%5CServicesSection.tsx&server=false!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Cimage-component.js&modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Csrc%5Ccomponents%5CHeroSection.tsx&modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Csrc%5Ccomponents%5CServicesSection.tsx&server=false! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/image-component.js */ \"(app-pages-browser)/./node_modules/next/dist/client/image-component.js\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/HeroSection.tsx */ \"(app-pages-browser)/./src/components/HeroSection.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/ServicesSection.tsx */ \"(app-pages-browser)/./src/components/ServicesSection.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNhaW5hbiU1Q09uZURyaXZlJTVDRG9jdW1lbnRzJTVDZWxldmF0ZSU1Q25vZGVfbW9kdWxlcyU1Q25leHQlNUNkaXN0JTVDY2xpZW50JTVDaW1hZ2UtY29tcG9uZW50LmpzJm1vZHVsZXM9QyUzQSU1Q1VzZXJzJTVDYWluYW4lNUNPbmVEcml2ZSU1Q0RvY3VtZW50cyU1Q2VsZXZhdGUlNUNzcmMlNUNjb21wb25lbnRzJTVDSGVyb1NlY3Rpb24udHN4Jm1vZHVsZXM9QyUzQSU1Q1VzZXJzJTVDYWluYW4lNUNPbmVEcml2ZSU1Q0RvY3VtZW50cyU1Q2VsZXZhdGUlNUNzcmMlNUNjb21wb25lbnRzJTVDU2VydmljZXNTZWN0aW9uLnRzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLG9PQUF5STtBQUN6SSwwTEFBcUg7QUFDckgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz84NzZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcYWluYW5cXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXGVsZXZhdGVcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZGlzdFxcXFxjbGllbnRcXFxcaW1hZ2UtY29tcG9uZW50LmpzXCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxhaW5hblxcXFxPbmVEcml2ZVxcXFxEb2N1bWVudHNcXFxcZWxldmF0ZVxcXFxzcmNcXFxcY29tcG9uZW50c1xcXFxIZXJvU2VjdGlvbi50c3hcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGFpbmFuXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxlbGV2YXRlXFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXFNlcnZpY2VzU2VjdGlvbi50c3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Cimage-component.js&modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Csrc%5Ccomponents%5CHeroSection.tsx&modules=C%3A%5CUsers%5Cainan%5COneDrive%5CDocuments%5Celevate%5Csrc%5Ccomponents%5CServicesSection.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/Observer.js":
/*!***************************************!*\
  !*** ./node_modules/gsap/Observer.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Observer: function() { return /* binding */ Observer; },\n/* harmony export */   _getProxyProp: function() { return /* binding */ _getProxyProp; },\n/* harmony export */   _getScrollFunc: function() { return /* binding */ _getScrollFunc; },\n/* harmony export */   _getTarget: function() { return /* binding */ _getTarget; },\n/* harmony export */   _getVelocityProp: function() { return /* binding */ _getVelocityProp; },\n/* harmony export */   _horizontal: function() { return /* binding */ _horizontal; },\n/* harmony export */   _isViewport: function() { return /* binding */ _isViewport; },\n/* harmony export */   _proxies: function() { return /* binding */ _proxies; },\n/* harmony export */   _scrollers: function() { return /* binding */ _scrollers; },\n/* harmony export */   _vertical: function() { return /* binding */ _vertical; },\n/* harmony export */   \"default\": function() { return /* binding */ Observer; }\n/* harmony export */ });\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n/*!\n * Observer 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ var gsap, _coreInitted, _clamp, _win, _doc, _docEl, _body, _isTouch, _pointerType, ScrollTrigger, _root, _normalizer, _eventTypes, _context, _getGSAP = function _getGSAP() {\n    return gsap ||  true && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n}, _startup = 1, _observers = [], _scrollers = [], _proxies = [], _getTime = Date.now, _bridge = function _bridge(name, value) {\n    return value;\n}, _integrate = function _integrate() {\n    var core = ScrollTrigger.core, data = core.bridge || {}, scrollers = core._scrollers, proxies = core._proxies;\n    scrollers.push.apply(scrollers, _scrollers);\n    proxies.push.apply(proxies, _proxies);\n    _scrollers = scrollers;\n    _proxies = proxies;\n    _bridge = function _bridge(name, value) {\n        return data[name](value);\n    };\n}, _getProxyProp = function _getProxyProp(element, property) {\n    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];\n}, _isViewport = function _isViewport(el) {\n    return !!~_root.indexOf(el);\n}, _addListener = function _addListener(element, type, func, passive, capture) {\n    return element.addEventListener(type, func, {\n        passive: passive !== false,\n        capture: !!capture\n    });\n}, _removeListener = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n}, _scrollLeft = \"scrollLeft\", _scrollTop = \"scrollTop\", _onScroll = function _onScroll() {\n    return _normalizer && _normalizer.isPressed || _scrollers.cache++;\n}, _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {\n    var cachingFunc = function cachingFunc(value) {\n        // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a \"scroll\" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when \"soft\" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)\n        if (value || value === 0) {\n            _startup && (_win.history.scrollRestoration = \"manual\"); // otherwise the new position will get overwritten by the browser onload.\n            var isNormalizing = _normalizer && _normalizer.isPressed;\n            value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!\n            f(value);\n            cachingFunc.cacheID = _scrollers.cache;\n            isNormalizing && _bridge(\"ss\", value); // set scroll (notify ScrollTrigger so it can dispatch a \"scrollStart\" event if necessary\n        } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge(\"ref\")) {\n            cachingFunc.cacheID = _scrollers.cache;\n            cachingFunc.v = f();\n        }\n        return cachingFunc.v + cachingFunc.offset;\n    };\n    cachingFunc.offset = 0;\n    return f && cachingFunc;\n}, _horizontal = {\n    s: _scrollLeft,\n    p: \"left\",\n    p2: \"Left\",\n    os: \"right\",\n    os2: \"Right\",\n    d: \"width\",\n    d2: \"Width\",\n    a: \"x\",\n    sc: _scrollCacheFunc(function(value) {\n        return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;\n    })\n}, _vertical = {\n    s: _scrollTop,\n    p: \"top\",\n    p2: \"Top\",\n    os: \"bottom\",\n    os2: \"Bottom\",\n    d: \"height\",\n    d2: \"Height\",\n    a: \"y\",\n    op: _horizontal,\n    sc: _scrollCacheFunc(function(value) {\n        return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;\n    })\n}, _getTarget = function _getTarget(t, self) {\n    return (self && self._ctx && self._ctx.selector || gsap.utils.toArray)(t)[0] || (typeof t === \"string\" && gsap.config().nullTargetWarn !== false ? console.warn(\"Element not found:\", t) : null);\n}, _isWithin = function _isWithin(element, list) {\n    // check if the element is in the list or is a descendant of an element in the list.\n    var i = list.length;\n    while(i--){\n        if (list[i] === element || list[i].contains(element)) {\n            return true;\n        }\n    }\n    return false;\n}, _getScrollFunc = function _getScrollFunc(element, _ref) {\n    var s = _ref.s, sc = _ref.sc;\n    // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a \".rec\" property in order to revert to that after refreshing to ensure things don't shift around.\n    _isViewport(element) && (element = _doc.scrollingElement || _docEl);\n    var i = _scrollers.indexOf(element), offset = sc === _vertical.sc ? 1 : 2;\n    !~i && (i = _scrollers.push(element) - 1);\n    _scrollers[i + offset] || _addListener(element, \"scroll\", _onScroll); // clear the cache when a scroll occurs\n    var prev = _scrollers[i + offset], func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function(value) {\n        return arguments.length ? element[s] = value : element[s];\n    })));\n    func.target = element;\n    prev || (func.smooth = gsap.getProperty(element, \"scrollBehavior\") === \"smooth\"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.\n    return func;\n}, _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {\n    var v1 = value, v2 = value, t1 = _getTime(), t2 = t1, min = minTimeRefresh || 50, dropToZeroTime = Math.max(500, min * 3), update = function update(value, force) {\n        var t = _getTime();\n        if (force || t - t1 > min) {\n            v2 = v1;\n            v1 = value;\n            t2 = t1;\n            t1 = t;\n        } else if (useDelta) {\n            v1 += value;\n        } else {\n            // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.\n            v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);\n        }\n    }, reset = function reset() {\n        v2 = v1 = useDelta ? 0 : v1;\n        t2 = t1 = 0;\n    }, getVelocity = function getVelocity(latestValue) {\n        var tOld = t2, vOld = v2, t = _getTime();\n        (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);\n        return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;\n    };\n    return {\n        update: update,\n        reset: reset,\n        getVelocity: getVelocity\n    };\n}, _getEvent = function _getEvent(e, preventDefault) {\n    preventDefault && !e._gsapAllow && e.preventDefault();\n    return e.changedTouches ? e.changedTouches[0] : e;\n}, _getAbsoluteMax = function _getAbsoluteMax(a) {\n    var max = Math.max.apply(Math, a), min = Math.min.apply(Math, a);\n    return Math.abs(max) >= Math.abs(min) ? max : min;\n}, _setScrollTrigger = function _setScrollTrigger() {\n    ScrollTrigger = gsap.core.globals().ScrollTrigger;\n    ScrollTrigger && ScrollTrigger.core && _integrate();\n}, _initCore = function _initCore(core) {\n    gsap = core || _getGSAP();\n    if (!_coreInitted && gsap && typeof document !== \"undefined\" && document.body) {\n        _win = window;\n        _doc = document;\n        _docEl = _doc.documentElement;\n        _body = _doc.body;\n        _root = [\n            _win,\n            _doc,\n            _docEl,\n            _body\n        ];\n        _clamp = gsap.utils.clamp;\n        _context = gsap.core.context || function() {};\n        _pointerType = \"onpointerenter\" in _body ? \"pointer\" : \"mouse\"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.\n        _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia(\"(hover: none), (pointer: coarse)\").matches ? 1 : \"ontouchstart\" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;\n        _eventTypes = Observer.eventTypes = (\"ontouchstart\" in _docEl ? \"touchstart,touchmove,touchcancel,touchend\" : !(\"onpointerdown\" in _docEl) ? \"mousedown,mousemove,mouseup,mouseup\" : \"pointerdown,pointermove,pointercancel,pointerup\").split(\",\");\n        setTimeout(function() {\n            return _startup = 0;\n        }, 500);\n        _setScrollTrigger();\n        _coreInitted = 1;\n    }\n    return _coreInitted;\n};\n_horizontal.op = _vertical;\n_scrollers.cache = 0;\nvar Observer = /*#__PURE__*/ function() {\n    function Observer(vars) {\n        this.init(vars);\n    }\n    var _proto = Observer.prototype;\n    _proto.init = function init(vars) {\n        _coreInitted || _initCore(gsap) || console.warn(\"Please gsap.registerPlugin(Observer)\");\n        ScrollTrigger || _setScrollTrigger();\n        var tolerance = vars.tolerance, dragMinimum = vars.dragMinimum, type = vars.type, target = vars.target, lineHeight = vars.lineHeight, debounce = vars.debounce, preventDefault = vars.preventDefault, onStop = vars.onStop, onStopDelay = vars.onStopDelay, ignore = vars.ignore, wheelSpeed = vars.wheelSpeed, event = vars.event, onDragStart = vars.onDragStart, onDragEnd = vars.onDragEnd, onDrag = vars.onDrag, onPress = vars.onPress, onRelease = vars.onRelease, onRight = vars.onRight, onLeft = vars.onLeft, onUp = vars.onUp, onDown = vars.onDown, onChangeX = vars.onChangeX, onChangeY = vars.onChangeY, onChange = vars.onChange, onToggleX = vars.onToggleX, onToggleY = vars.onToggleY, onHover = vars.onHover, onHoverEnd = vars.onHoverEnd, onMove = vars.onMove, ignoreCheck = vars.ignoreCheck, isNormalizer = vars.isNormalizer, onGestureStart = vars.onGestureStart, onGestureEnd = vars.onGestureEnd, onWheel = vars.onWheel, onEnable = vars.onEnable, onDisable = vars.onDisable, onClick = vars.onClick, scrollSpeed = vars.scrollSpeed, capture = vars.capture, allowClicks = vars.allowClicks, lockAxis = vars.lockAxis, onLockAxis = vars.onLockAxis;\n        this.target = target = _getTarget(target) || _docEl;\n        this.vars = vars;\n        ignore && (ignore = gsap.utils.toArray(ignore));\n        tolerance = tolerance || 1e-9;\n        dragMinimum = dragMinimum || 0;\n        wheelSpeed = wheelSpeed || 1;\n        scrollSpeed = scrollSpeed || 1;\n        type = type || \"wheel,touch,pointer\";\n        debounce = debounce !== false;\n        lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report \"normal\", so default to 22.\n        var id, onStopDelayedCall, dragged, moved, wheeled, locked, axis, self = this, prevDeltaX = 0, prevDeltaY = 0, passive = vars.passive || !preventDefault && vars.passive !== false, scrollFuncX = _getScrollFunc(target, _horizontal), scrollFuncY = _getScrollFunc(target, _vertical), scrollX = scrollFuncX(), scrollY = scrollFuncY(), limitToTouch = ~type.indexOf(\"touch\") && !~type.indexOf(\"pointer\") && _eventTypes[0] === \"pointerdown\", // for devices that accommodate mouse events and touch events, we need to distinguish.\n        isViewport = _isViewport(target), ownerDoc = target.ownerDocument || _doc, deltaX = [\n            0,\n            0,\n            0\n        ], // wheel, scroll, pointer/touch\n        deltaY = [\n            0,\n            0,\n            0\n        ], onClickTime = 0, clickCapture = function clickCapture() {\n            return onClickTime = _getTime();\n        }, _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {\n            return (self.event = e) && ignore && _isWithin(e.target, ignore) || isPointerOrTouch && limitToTouch && e.pointerType !== \"touch\" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);\n        }, onStopFunc = function onStopFunc() {\n            self._vx.reset();\n            self._vy.reset();\n            onStopDelayedCall.pause();\n            onStop && onStop(self);\n        }, update = function update() {\n            var dx = self.deltaX = _getAbsoluteMax(deltaX), dy = self.deltaY = _getAbsoluteMax(deltaY), changedX = Math.abs(dx) >= tolerance, changedY = Math.abs(dy) >= tolerance;\n            onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.\n            if (changedX) {\n                onRight && self.deltaX > 0 && onRight(self);\n                onLeft && self.deltaX < 0 && onLeft(self);\n                onChangeX && onChangeX(self);\n                onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);\n                prevDeltaX = self.deltaX;\n                deltaX[0] = deltaX[1] = deltaX[2] = 0;\n            }\n            if (changedY) {\n                onDown && self.deltaY > 0 && onDown(self);\n                onUp && self.deltaY < 0 && onUp(self);\n                onChangeY && onChangeY(self);\n                onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);\n                prevDeltaY = self.deltaY;\n                deltaY[0] = deltaY[1] = deltaY[2] = 0;\n            }\n            if (moved || dragged) {\n                onMove && onMove(self);\n                if (dragged) {\n                    onDragStart && dragged === 1 && onDragStart(self);\n                    onDrag && onDrag(self);\n                    dragged = 0;\n                }\n                moved = false;\n            }\n            locked && !(locked = false) && onLockAxis && onLockAxis(self);\n            if (wheeled) {\n                onWheel(self);\n                wheeled = false;\n            }\n            id = 0;\n        }, onDelta = function onDelta(x, y, index) {\n            deltaX[index] += x;\n            deltaY[index] += y;\n            self._vx.update(x);\n            self._vy.update(y);\n            debounce ? id || (id = requestAnimationFrame(update)) : update();\n        }, onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {\n            if (lockAxis && !axis) {\n                self.axis = axis = Math.abs(x) > Math.abs(y) ? \"x\" : \"y\";\n                locked = true;\n            }\n            if (axis !== \"y\") {\n                deltaX[2] += x;\n                self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.\n            }\n            if (axis !== \"x\") {\n                deltaY[2] += y;\n                self._vy.update(y, true);\n            }\n            debounce ? id || (id = requestAnimationFrame(update)) : update();\n        }, _onDrag = function _onDrag(e) {\n            if (_ignoreCheck(e, 1)) {\n                return;\n            }\n            e = _getEvent(e, preventDefault);\n            var x = e.clientX, y = e.clientY, dx = x - self.x, dy = y - self.y, isDragging = self.isDragging;\n            self.x = x;\n            self.y = y;\n            if (isDragging || (dx || dy) && (Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum)) {\n                dragged = isDragging ? 2 : 1; // dragged: 0 = not dragging, 1 = first drag, 2 = normal drag\n                isDragging || (self.isDragging = true);\n                onTouchOrPointerDelta(dx, dy);\n            }\n        }, _onPress = self.onPress = function(e) {\n            if (_ignoreCheck(e, 1) || e && e.button) {\n                return;\n            }\n            self.axis = axis = null;\n            onStopDelayedCall.pause();\n            self.isPressed = true;\n            e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.\n            prevDeltaX = prevDeltaY = 0;\n            self.startX = self.x = e.clientX;\n            self.startY = self.y = e.clientY;\n            self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.\n            self._vy.reset();\n            _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, passive, true);\n            self.deltaX = self.deltaY = 0;\n            onPress && onPress(self);\n        }, _onRelease = self.onRelease = function(e) {\n            if (_ignoreCheck(e, 1)) {\n                return;\n            }\n            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n            var isTrackingDrag = !isNaN(self.y - self.startY), wasDragging = self.isDragging, isDragNotClick = wasDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3), // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.\n            eventData = _getEvent(e);\n            if (!isDragNotClick && isTrackingDrag) {\n                self._vx.reset();\n                self._vy.reset(); //if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.\n                if (preventDefault && allowClicks) {\n                    gsap.delayedCall(0.08, function() {\n                        // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular \"click\" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the \"real\"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the \"real\" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.\n                        if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {\n                            if (e.target.click) {\n                                //some browsers (like mobile Safari) don't properly trigger the click event\n                                e.target.click();\n                            } else if (ownerDoc.createEvent) {\n                                var syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                                syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);\n                                e.target.dispatchEvent(syntheticEvent);\n                            }\n                        }\n                    });\n                }\n            }\n            self.isDragging = self.isGesturing = self.isPressed = false;\n            onStop && wasDragging && !isNormalizer && onStopDelayedCall.restart(true);\n            dragged && update(); // in case debouncing, we don't want onDrag to fire AFTER onDragEnd().\n            onDragEnd && wasDragging && onDragEnd(self);\n            onRelease && onRelease(self, isDragNotClick);\n        }, _onGestureStart = function _onGestureStart(e) {\n            return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);\n        }, _onGestureEnd = function _onGestureEnd() {\n            return (self.isGesturing = false) || onGestureEnd(self);\n        }, onScroll = function onScroll(e) {\n            if (_ignoreCheck(e)) {\n                return;\n            }\n            var x = scrollFuncX(), y = scrollFuncY();\n            onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);\n            scrollX = x;\n            scrollY = y;\n            onStop && onStopDelayedCall.restart(true);\n        }, _onWheel = function _onWheel(e) {\n            if (_ignoreCheck(e)) {\n                return;\n            }\n            e = _getEvent(e, preventDefault);\n            onWheel && (wheeled = true);\n            var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;\n            onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);\n            onStop && !isNormalizer && onStopDelayedCall.restart(true);\n        }, _onMove = function _onMove(e) {\n            if (_ignoreCheck(e)) {\n                return;\n            }\n            var x = e.clientX, y = e.clientY, dx = x - self.x, dy = y - self.y;\n            self.x = x;\n            self.y = y;\n            moved = true;\n            onStop && onStopDelayedCall.restart(true);\n            (dx || dy) && onTouchOrPointerDelta(dx, dy);\n        }, _onHover = function _onHover(e) {\n            self.event = e;\n            onHover(self);\n        }, _onHoverEnd = function _onHoverEnd(e) {\n            self.event = e;\n            onHoverEnd(self);\n        }, _onClick = function _onClick(e) {\n            return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);\n        };\n        onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();\n        self.deltaX = self.deltaY = 0;\n        self._vx = _getVelocityProp(0, 50, true);\n        self._vy = _getVelocityProp(0, 50, true);\n        self.scrollX = scrollFuncX;\n        self.scrollY = scrollFuncY;\n        self.isDragging = self.isGesturing = self.isPressed = false;\n        _context(this);\n        self.enable = function(e) {\n            if (!self.isEnabled) {\n                _addListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n                type.indexOf(\"scroll\") >= 0 && _addListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, passive, capture);\n                type.indexOf(\"wheel\") >= 0 && _addListener(target, \"wheel\", _onWheel, passive, capture);\n                if (type.indexOf(\"touch\") >= 0 && _isTouch || type.indexOf(\"pointer\") >= 0) {\n                    _addListener(target, _eventTypes[0], _onPress, passive, capture);\n                    _addListener(ownerDoc, _eventTypes[2], _onRelease);\n                    _addListener(ownerDoc, _eventTypes[3], _onRelease);\n                    allowClicks && _addListener(target, \"click\", clickCapture, true, true);\n                    onClick && _addListener(target, \"click\", _onClick);\n                    onGestureStart && _addListener(ownerDoc, \"gesturestart\", _onGestureStart);\n                    onGestureEnd && _addListener(ownerDoc, \"gestureend\", _onGestureEnd);\n                    onHover && _addListener(target, _pointerType + \"enter\", _onHover);\n                    onHoverEnd && _addListener(target, _pointerType + \"leave\", _onHoverEnd);\n                    onMove && _addListener(target, _pointerType + \"move\", _onMove);\n                }\n                self.isEnabled = true;\n                self.isDragging = self.isGesturing = self.isPressed = moved = dragged = false;\n                self._vx.reset();\n                self._vy.reset();\n                scrollX = scrollFuncX();\n                scrollY = scrollFuncY();\n                e && e.type && _onPress(e);\n                onEnable && onEnable(self);\n            }\n            return self;\n        };\n        self.disable = function() {\n            if (self.isEnabled) {\n                // only remove the _onScroll listener if there aren't any others that rely on the functionality.\n                _observers.filter(function(o) {\n                    return o !== self && _isViewport(o.target);\n                }).length || _removeListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n                if (self.isPressed) {\n                    self._vx.reset();\n                    self._vy.reset();\n                    _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n                }\n                _removeListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, capture);\n                _removeListener(target, \"wheel\", _onWheel, capture);\n                _removeListener(target, _eventTypes[0], _onPress, capture);\n                _removeListener(ownerDoc, _eventTypes[2], _onRelease);\n                _removeListener(ownerDoc, _eventTypes[3], _onRelease);\n                _removeListener(target, \"click\", clickCapture, true);\n                _removeListener(target, \"click\", _onClick);\n                _removeListener(ownerDoc, \"gesturestart\", _onGestureStart);\n                _removeListener(ownerDoc, \"gestureend\", _onGestureEnd);\n                _removeListener(target, _pointerType + \"enter\", _onHover);\n                _removeListener(target, _pointerType + \"leave\", _onHoverEnd);\n                _removeListener(target, _pointerType + \"move\", _onMove);\n                self.isEnabled = self.isPressed = self.isDragging = false;\n                onDisable && onDisable(self);\n            }\n        };\n        self.kill = self.revert = function() {\n            self.disable();\n            var i = _observers.indexOf(self);\n            i >= 0 && _observers.splice(i, 1);\n            _normalizer === self && (_normalizer = 0);\n        };\n        _observers.push(self);\n        isNormalizer && _isViewport(target) && (_normalizer = self);\n        self.enable(event);\n    };\n    _createClass(Observer, [\n        {\n            key: \"velocityX\",\n            get: function get() {\n                return this._vx.getVelocity();\n            }\n        },\n        {\n            key: \"velocityY\",\n            get: function get() {\n                return this._vy.getVelocity();\n            }\n        }\n    ]);\n    return Observer;\n}();\nObserver.version = \"3.13.0\";\nObserver.create = function(vars) {\n    return new Observer(vars);\n};\nObserver.register = _initCore;\nObserver.getAll = function() {\n    return _observers.slice();\n};\nObserver.getById = function(id) {\n    return _observers.filter(function(o) {\n        return o.vars.id === id;\n    })[0];\n};\n_getGSAP() && gsap.registerPlugin(Observer);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/Observer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/ScrollTrigger.js":
/*!********************************************!*\
  !*** ./node_modules/gsap/ScrollTrigger.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScrollTrigger: function() { return /* binding */ ScrollTrigger; },\n/* harmony export */   \"default\": function() { return /* binding */ ScrollTrigger; }\n/* harmony export */ });\n/* harmony import */ var _Observer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observer.js */ \"(app-pages-browser)/./node_modules/gsap/Observer.js\");\n/*!\n * ScrollTrigger 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ \nvar gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp, _i, _prevWidth, _prevHeight, _autoRefresh, _sort, _suppressOverwrites, _ignoreResize, _normalizer, _ignoreMobileResize, _baseScreenHeight, _baseScreenWidth, _fixIOSBug, _context, _scrollRestoration, _div100vh, _100vh, _isReverted, _clampingMax, _limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.\n_startup = 1, _getTime = Date.now, _time1 = _getTime(), _lastScrollTime = 0, _enabled = 0, _parseClamp = function _parseClamp(value, type, self) {\n    var clamp = _isString(value) && (value.substr(0, 6) === \"clamp(\" || value.indexOf(\"max\") > -1);\n    self[\"_\" + type + \"Clamp\"] = clamp;\n    return clamp ? value.substr(6, value.length - 7) : value;\n}, _keepClamp = function _keepClamp(value, clamp) {\n    return clamp && (!_isString(value) || value.substr(0, 6) !== \"clamp(\") ? \"clamp(\" + value + \")\" : value;\n}, _rafBugFix = function _rafBugFix() {\n    return _enabled && requestAnimationFrame(_rafBugFix);\n}, // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.\n_pointerDownHandler = function _pointerDownHandler() {\n    return _pointerIsDown = 1;\n}, _pointerUpHandler = function _pointerUpHandler() {\n    return _pointerIsDown = 0;\n}, _passThrough = function _passThrough(v) {\n    return v;\n}, _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n}, _windowExists = function _windowExists() {\n    return \"object\" !== \"undefined\";\n}, _getGSAP = function _getGSAP() {\n    return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n}, _isViewport = function _isViewport(e) {\n    return !!~_root.indexOf(e);\n}, _getViewportDimension = function _getViewportDimension(dimensionProperty) {\n    return (dimensionProperty === \"Height\" ? _100vh : _win[\"inner\" + dimensionProperty]) || _docEl[\"client\" + dimensionProperty] || _body[\"client\" + dimensionProperty];\n}, _getBoundsFunc = function _getBoundsFunc(element) {\n    return (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, \"getBoundingClientRect\") || (_isViewport(element) ? function() {\n        _winOffsets.width = _win.innerWidth;\n        _winOffsets.height = _100vh;\n        return _winOffsets;\n    } : function() {\n        return _getBounds(element);\n    });\n}, _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {\n    var d = _ref.d, d2 = _ref.d2, a = _ref.a;\n    return (a = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"getBoundingClientRect\")) ? function() {\n        return a()[d];\n    } : function() {\n        return (isViewport ? _getViewportDimension(d2) : scroller[\"client\" + d2]) || 0;\n    };\n}, _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {\n    return !isViewport || ~_Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.indexOf(element) ? _getBoundsFunc(element) : function() {\n        return _winOffsets;\n    };\n}, _maxScroll = function _maxScroll(element, _ref2) {\n    var s = _ref2.s, d2 = _ref2.d2, d = _ref2.d, a = _ref2.a;\n    return Math.max(0, (s = \"scroll\" + d2) && (a = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - _getViewportDimension(d2) : element[s] - element[\"offset\" + d2]);\n}, _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {\n    for(var i = 0; i < _autoRefresh.length; i += 3){\n        (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);\n    }\n}, _isString = function _isString(value) {\n    return typeof value === \"string\";\n}, _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n}, _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n}, _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n}, _endAnimation = function _endAnimation(animation, reversed, pause) {\n    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();\n}, _callback = function _callback(self, func) {\n    if (self.enabled) {\n        var result = self._ctx ? self._ctx.add(function() {\n            return func(self);\n        }) : func(self);\n        result && result.totalTime && (self.callbackAnimation = result);\n    }\n}, _abs = Math.abs, _left = \"left\", _top = \"top\", _right = \"right\", _bottom = \"bottom\", _width = \"width\", _height = \"height\", _Right = \"Right\", _Left = \"Left\", _Top = \"Top\", _Bottom = \"Bottom\", _padding = \"padding\", _margin = \"margin\", _Width = \"Width\", _Height = \"Height\", _px = \"px\", _getComputedStyle = function _getComputedStyle(element) {\n    return _win.getComputedStyle(element);\n}, _makePositionable = function _makePositionable(element) {\n    // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative\n    var position = _getComputedStyle(element).position;\n    element.style.position = position === \"absolute\" || position === \"fixed\" ? position : \"relative\";\n}, _setDefaults = function _setDefaults(obj, defaults) {\n    for(var p in defaults){\n        p in obj || (obj[p] = defaults[p]);\n    }\n    return obj;\n}, _getBounds = function _getBounds(element, withoutTransforms) {\n    var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== \"matrix(1, 0, 0, 1, 0, 0)\" && gsap.to(element, {\n        x: 0,\n        y: 0,\n        xPercent: 0,\n        yPercent: 0,\n        rotation: 0,\n        rotationX: 0,\n        rotationY: 0,\n        scale: 1,\n        skewX: 0,\n        skewY: 0\n    }).progress(1), bounds = element.getBoundingClientRect();\n    tween && tween.progress(0).kill();\n    return bounds;\n}, _getSize = function _getSize(element, _ref3) {\n    var d2 = _ref3.d2;\n    return element[\"offset\" + d2] || element[\"client\" + d2] || 0;\n}, _getLabelRatioArray = function _getLabelRatioArray(timeline) {\n    var a = [], labels = timeline.labels, duration = timeline.duration(), p;\n    for(p in labels){\n        a.push(labels[p] / duration);\n    }\n    return a;\n}, _getClosestLabel = function _getClosestLabel(animation) {\n    return function(value) {\n        return gsap.utils.snap(_getLabelRatioArray(animation), value);\n    };\n}, _snapDirectional = function _snapDirectional(snapIncrementOrArray) {\n    var snap = gsap.utils.snap(snapIncrementOrArray), a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function(a, b) {\n        return a - b;\n    });\n    return a ? function(value, direction, threshold) {\n        if (threshold === void 0) {\n            threshold = 1e-3;\n        }\n        var i;\n        if (!direction) {\n            return snap(value);\n        }\n        if (direction > 0) {\n            value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.\n            for(i = 0; i < a.length; i++){\n                if (a[i] >= value) {\n                    return a[i];\n                }\n            }\n            return a[i - 1];\n        } else {\n            i = a.length;\n            value += threshold;\n            while(i--){\n                if (a[i] <= value) {\n                    return a[i];\n                }\n            }\n        }\n        return a[0];\n    } : function(value, direction, threshold) {\n        if (threshold === void 0) {\n            threshold = 1e-3;\n        }\n        var snapped = snap(value);\n        return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);\n    };\n}, _getLabelAtDirection = function _getLabelAtDirection(timeline) {\n    return function(value, st) {\n        return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);\n    };\n}, _multiListener = function _multiListener(func, element, types, callback) {\n    return types.split(\",\").forEach(function(type) {\n        return func(element, type, callback);\n    });\n}, _addListener = function _addListener(element, type, func, nonPassive, capture) {\n    return element.addEventListener(type, func, {\n        passive: !nonPassive,\n        capture: !!capture\n    });\n}, _removeListener = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n}, _wheelListener = function _wheelListener(func, el, scrollFunc) {\n    scrollFunc = scrollFunc && scrollFunc.wheelHandler;\n    if (scrollFunc) {\n        func(el, \"wheel\", scrollFunc);\n        func(el, \"touchmove\", scrollFunc);\n    }\n}, _markerDefaults = {\n    startColor: \"green\",\n    endColor: \"red\",\n    indent: 0,\n    fontSize: \"16px\",\n    fontWeight: \"normal\"\n}, _defaults = {\n    toggleActions: \"play\",\n    anticipatePin: 0\n}, _keywords = {\n    top: 0,\n    left: 0,\n    center: 0.5,\n    bottom: 1,\n    right: 1\n}, _offsetToPx = function _offsetToPx(value, size) {\n    if (_isString(value)) {\n        var eqIndex = value.indexOf(\"=\"), relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;\n        if (~eqIndex) {\n            value.indexOf(\"%\") > eqIndex && (relative *= size / 100);\n            value = value.substr(0, eqIndex - 1);\n        }\n        value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf(\"%\") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);\n    }\n    return value;\n}, _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {\n    var startColor = _ref4.startColor, endColor = _ref4.endColor, fontSize = _ref4.fontSize, indent = _ref4.indent, fontWeight = _ref4.fontWeight;\n    var e = _doc.createElement(\"div\"), useFixedPosition = _isViewport(container) || (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(container, \"pinType\") === \"fixed\", isScroller = type.indexOf(\"scroller\") !== -1, parent = useFixedPosition ? _body : container, isStart = type.indexOf(\"start\") !== -1, color = isStart ? startColor : endColor, css = \"border-color:\" + color + \";font-size:\" + fontSize + \";color:\" + color + \";font-weight:\" + fontWeight + \";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;\";\n    css += \"position:\" + ((isScroller || containerAnimation) && useFixedPosition ? \"fixed;\" : \"absolute;\");\n    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? _right : _bottom) + \":\" + (offset + parseFloat(indent)) + \"px;\");\n    matchWidthEl && (css += \"box-sizing:border-box;text-align:left;width:\" + matchWidthEl.offsetWidth + \"px;\");\n    e._isStart = isStart;\n    e.setAttribute(\"class\", \"gsap-marker-\" + type + (name ? \" marker-\" + name : \"\"));\n    e.style.cssText = css;\n    e.innerText = name || name === 0 ? type + \"-\" + name : type;\n    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);\n    e._offset = e[\"offset\" + direction.op.d2];\n    _positionMarker(e, 0, direction, isStart);\n    return e;\n}, _positionMarker = function _positionMarker(marker, start, direction, flipped) {\n    var vars = {\n        display: \"block\"\n    }, side = direction[flipped ? \"os2\" : \"p2\"], oppositeSide = direction[flipped ? \"p2\" : \"os2\"];\n    marker._isFlipped = flipped;\n    vars[direction.a + \"Percent\"] = flipped ? -100 : 0;\n    vars[direction.a] = flipped ? \"1px\" : 0;\n    vars[\"border\" + side + _Width] = 1;\n    vars[\"border\" + oppositeSide + _Width] = 0;\n    vars[direction.p] = start + \"px\";\n    gsap.set(marker, vars);\n}, _triggers = [], _ids = {}, _rafID, _sync = function _sync() {\n    return _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));\n}, _onScroll = function _onScroll() {\n    // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010\n    if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) {\n        // if the user is dragging the scrollbar, allow it.\n        _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n        if (_normalizer) {\n            _rafID || (_rafID = requestAnimationFrame(_updateAll));\n        } else {\n            _updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110\n        }\n        _lastScrollTime || _dispatch(\"scrollStart\");\n        _lastScrollTime = _getTime();\n    }\n}, _setBaseDimensions = function _setBaseDimensions() {\n    _baseScreenWidth = _win.innerWidth;\n    _baseScreenHeight = _win.innerHeight;\n}, _onResize = function _onResize(force) {\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n    (force === true || !_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25)) && _resizeDelay.restart(true);\n}, // ignore resizes triggered by refresh()\n_listeners = {}, _emptyArray = [], _softRefresh = function _softRefresh() {\n    return _removeListener(ScrollTrigger, \"scrollEnd\", _softRefresh) || _refreshAll(true);\n}, _dispatch = function _dispatch(type) {\n    return _listeners[type] && _listeners[type].map(function(f) {\n        return f();\n    }) || _emptyArray;\n}, _savedStyles = [], // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.\n_revertRecorded = function _revertRecorded(media) {\n    for(var i = 0; i < _savedStyles.length; i += 5){\n        if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {\n            _savedStyles[i].style.cssText = _savedStyles[i + 1];\n            _savedStyles[i].getBBox && _savedStyles[i].setAttribute(\"transform\", _savedStyles[i + 2] || \"\");\n            _savedStyles[i + 3].uncache = 1;\n        }\n    }\n}, _revertAll = function _revertAll(kill, media) {\n    var trigger;\n    for(_i = 0; _i < _triggers.length; _i++){\n        trigger = _triggers[_i];\n        if (trigger && (!media || trigger._ctx === media)) {\n            if (kill) {\n                trigger.kill(1);\n            } else {\n                trigger.revert(true, true);\n            }\n        }\n    }\n    _isReverted = true;\n    media && _revertRecorded(media);\n    media || _dispatch(\"revert\");\n}, _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {\n    // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n    (force || !_refreshingAll) && _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(obj) {\n        return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);\n    });\n    _isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);\n}, _refreshingAll, _refreshID = 0, _queueRefreshID, _queueRefreshAll = function _queueRefreshAll() {\n    // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's \"load\" or \"DOMContentLoaded\" events to trigger it.\n    if (_queueRefreshID !== _refreshID) {\n        var id = _queueRefreshID = _refreshID;\n        requestAnimationFrame(function() {\n            return id === _refreshID && _refreshAll(true);\n        });\n    }\n}, _refresh100vh = function _refresh100vh() {\n    _body.appendChild(_div100vh);\n    _100vh = !_normalizer && _div100vh.offsetHeight || _win.innerHeight;\n    _body.removeChild(_div100vh);\n}, _hideAllMarkers = function _hideAllMarkers(hide) {\n    return _toArray(\".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end\").forEach(function(el) {\n        return el.style.display = hide ? \"none\" : \"block\";\n    });\n}, _refreshAll = function _refreshAll(force, skipRevert) {\n    _docEl = _doc.documentElement; // some frameworks like Astro may cache the <body> and replace it during routing, so we'll just re-record the _docEl and _body for safety (otherwise, the markers may not get added properly).\n    _body = _doc.body;\n    _root = [\n        _win,\n        _doc,\n        _docEl,\n        _body\n    ];\n    if (_lastScrollTime && !force && !_isReverted) {\n        _addListener(ScrollTrigger, \"scrollEnd\", _softRefresh);\n        return;\n    }\n    _refresh100vh();\n    _refreshingAll = ScrollTrigger.isRefreshing = true;\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(obj) {\n        return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());\n    }); // force the clearing of the cache because some browsers take a little while to dispatch the \"scroll\" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away\n    var refreshInits = _dispatch(\"refreshInit\");\n    _sort && ScrollTrigger.sort();\n    skipRevert || _revertAll();\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(obj) {\n        if (_isFunction(obj)) {\n            obj.smooth && (obj.target.style.scrollBehavior = \"auto\"); // smooth scrolling interferes\n            obj(0);\n        }\n    });\n    _triggers.slice(0).forEach(function(t) {\n        return t.refresh();\n    }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.\n    _isReverted = false;\n    _triggers.forEach(function(t) {\n        // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.\n        if (t._subPinOffset && t.pin) {\n            var prop = t.vars.horizontal ? \"offsetWidth\" : \"offsetHeight\", original = t.pin[prop];\n            t.revert(true, 1);\n            t.adjustPinSpacing(t.pin[prop] - original);\n            t.refresh();\n        }\n    });\n    _clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.\n    _hideAllMarkers(true);\n    _triggers.forEach(function(t) {\n        // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: \"max\". Same for anything with a clamped end\n        var max = _maxScroll(t.scroller, t._dir), endClamp = t.vars.end === \"max\" || t._endClamp && t.end > max, startClamp = t._startClamp && t.start >= max;\n        (endClamp || startClamp) && t.setPositions(startClamp ? max - 1 : t.start, endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end, true);\n    });\n    _hideAllMarkers(false);\n    _clampingMax = 0;\n    refreshInits.forEach(function(result) {\n        return result && result.render && result.render(-1);\n    }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.\n    _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(obj) {\n        if (_isFunction(obj)) {\n            obj.smooth && requestAnimationFrame(function() {\n                return obj.target.style.scrollBehavior = \"smooth\";\n            });\n            obj.rec && obj(obj.rec);\n        }\n    });\n    _clearScrollMemory(_scrollRestoration, 1);\n    _resizeDelay.pause();\n    _refreshID++;\n    _refreshingAll = 2;\n    _updateAll(2);\n    _triggers.forEach(function(t) {\n        return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);\n    });\n    _refreshingAll = ScrollTrigger.isRefreshing = false;\n    _dispatch(\"refresh\");\n}, _lastScroll = 0, _direction = 1, _primary, _updateAll = function _updateAll(force) {\n    if (force === 2 || !_refreshingAll && !_isReverted) {\n        // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.\n        ScrollTrigger.isUpdating = true;\n        _primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.\n        var l = _triggers.length, time = _getTime(), recordVelocity = time - _time1 >= 50, scroll = l && _triggers[0].scroll();\n        _direction = _lastScroll > scroll ? -1 : 1;\n        _refreshingAll || (_lastScroll = scroll);\n        if (recordVelocity) {\n            if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {\n                _lastScrollTime = 0;\n                _dispatch(\"scrollEnd\");\n            }\n            _time2 = _time1;\n            _time1 = time;\n        }\n        if (_direction < 0) {\n            _i = l;\n            while(_i-- > 0){\n                _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n            }\n            _direction = 1;\n        } else {\n            for(_i = 0; _i < l; _i++){\n                _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n            }\n        }\n        ScrollTrigger.isUpdating = false;\n    }\n    _rafID = 0;\n}, _propNamesToCopy = [\n    _left,\n    _top,\n    _bottom,\n    _right,\n    _margin + _Bottom,\n    _margin + _Right,\n    _margin + _Top,\n    _margin + _Left,\n    \"display\",\n    \"flexShrink\",\n    \"float\",\n    \"zIndex\",\n    \"gridColumnStart\",\n    \"gridColumnEnd\",\n    \"gridRowStart\",\n    \"gridRowEnd\",\n    \"gridArea\",\n    \"justifySelf\",\n    \"alignSelf\",\n    \"placeSelf\",\n    \"order\"\n], _stateProps = _propNamesToCopy.concat([\n    _width,\n    _height,\n    \"boxSizing\",\n    \"max\" + _Width,\n    \"max\" + _Height,\n    \"position\",\n    _margin,\n    _padding,\n    _padding + _Top,\n    _padding + _Right,\n    _padding + _Bottom,\n    _padding + _Left\n]), _swapPinOut = function _swapPinOut(pin, spacer, state) {\n    _setState(state);\n    var cache = pin._gsap;\n    if (cache.spacerIsNative) {\n        _setState(cache.spacerState);\n    } else if (pin._gsap.swappedIn) {\n        var parent = spacer.parentNode;\n        if (parent) {\n            parent.insertBefore(pin, spacer);\n            parent.removeChild(spacer);\n        }\n    }\n    pin._gsap.swappedIn = false;\n}, _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {\n    if (!pin._gsap.swappedIn) {\n        var i = _propNamesToCopy.length, spacerStyle = spacer.style, pinStyle = pin.style, p;\n        while(i--){\n            p = _propNamesToCopy[i];\n            spacerStyle[p] = cs[p];\n        }\n        spacerStyle.position = cs.position === \"absolute\" ? \"absolute\" : \"relative\";\n        cs.display === \"inline\" && (spacerStyle.display = \"inline-block\");\n        pinStyle[_bottom] = pinStyle[_right] = \"auto\";\n        spacerStyle.flexBasis = cs.flexBasis || \"auto\";\n        spacerStyle.overflow = \"visible\";\n        spacerStyle.boxSizing = \"border-box\";\n        spacerStyle[_width] = _getSize(pin, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal) + _px;\n        spacerStyle[_height] = _getSize(pin, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical) + _px;\n        spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = \"0\";\n        _setState(spacerState);\n        pinStyle[_width] = pinStyle[\"max\" + _Width] = cs[_width];\n        pinStyle[_height] = pinStyle[\"max\" + _Height] = cs[_height];\n        pinStyle[_padding] = cs[_padding];\n        if (pin.parentNode !== spacer) {\n            pin.parentNode.insertBefore(spacer, pin);\n            spacer.appendChild(pin);\n        }\n        pin._gsap.swappedIn = true;\n    }\n}, _capsExp = /([A-Z])/g, _setState = function _setState(state) {\n    if (state) {\n        var style = state.t.style, l = state.length, i = 0, p, value;\n        (state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off\n        for(; i < l; i += 2){\n            value = state[i + 1];\n            p = state[i];\n            if (value) {\n                style[p] = value;\n            } else if (style[p]) {\n                style.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n            }\n        }\n    }\n}, _getState = function _getState(element) {\n    // returns an Array with alternating values like [property, value, property, value] and a \"t\" property pointing to the target (element). Makes it fast and cheap.\n    var l = _stateProps.length, style = element.style, state = [], i = 0;\n    for(; i < l; i++){\n        state.push(_stateProps[i], style[_stateProps[i]]);\n    }\n    state.t = element;\n    return state;\n}, _copyState = function _copyState(state, override, omitOffsets) {\n    var result = [], l = state.length, i = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true\n    p;\n    for(; i < l; i += 2){\n        p = state[i];\n        result.push(p, p in override ? override[p] : state[i + 1]);\n    }\n    result.t = state.t;\n    return result;\n}, _winOffsets = {\n    left: 0,\n    top: 0\n}, // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition(\"#id\", \"top bottom\")\n// _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {\n// \tscroller = _getTarget(scroller || _win);\n// \tlet direction = horizontal ? _horizontal : _vertical,\n// \t\tisViewport = _isViewport(scroller);\n// \t_getSizeFunc(scroller, isViewport, direction);\n// \treturn _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);\n// },\n_parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {\n    _isFunction(value) && (value = value(self));\n    if (_isString(value) && value.substr(0, 3) === \"max\") {\n        value = scrollerMax + (value.charAt(4) === \"=\" ? _offsetToPx(\"0\" + value.substr(3), scrollerSize) : 0);\n    }\n    var time = containerAnimation ? containerAnimation.time() : 0, p1, p2, element;\n    containerAnimation && containerAnimation.seek(0);\n    isNaN(value) || (value = +value); // convert a string number like \"45\" to an actual number\n    if (!_isNumber(value)) {\n        _isFunction(trigger) && (trigger = trigger(self));\n        var offsets = (value || \"0\").split(\" \"), bounds, localOffset, globalOffset, display;\n        element = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger, self) || _body;\n        bounds = _getBounds(element) || {};\n        if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === \"none\") {\n            // if display is \"none\", it won't report getBoundingClientRect() properly\n            display = element.style.display;\n            element.style.display = \"block\";\n            bounds = _getBounds(element);\n            display ? element.style.display = display : element.style.removeProperty(\"display\");\n        }\n        localOffset = _offsetToPx(offsets[0], bounds[direction.d]);\n        globalOffset = _offsetToPx(offsets[1] || \"0\", scrollerSize);\n        value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;\n        markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);\n        scrollerSize -= scrollerSize - globalOffset; // adjust for the marker\n    } else {\n        containerAnimation && (value = gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));\n        markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);\n    }\n    if (clampZeroProp) {\n        self[clampZeroProp] = value || -0.001;\n        value < 0 && (value = 0);\n    }\n    if (marker) {\n        var position = value + scrollerSize, isStart = marker._isStart;\n        p1 = \"scroll\" + direction.d2;\n        _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1);\n        if (useFixedPosition) {\n            scrollerBounds = _getBounds(markerScroller);\n            useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);\n        }\n    }\n    if (containerAnimation && element) {\n        p1 = _getBounds(element);\n        containerAnimation.seek(scrollerMax);\n        p2 = _getBounds(element);\n        containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];\n        value = value / containerAnimation._caScrollDist * scrollerMax;\n    }\n    containerAnimation && containerAnimation.seek(time);\n    return containerAnimation ? value : Math.round(value);\n}, _prefixExp = /(webkit|moz|length|cssText|inset)/i, _reparent = function _reparent(element, parent, top, left) {\n    if (element.parentNode !== parent) {\n        var style = element.style, p, cs;\n        if (parent === _body) {\n            element._stOrig = style.cssText; // record original inline styles so we can revert them later\n            cs = _getComputedStyle(element);\n            for(p in cs){\n                // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.\n                if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === \"string\" && p !== \"0\") {\n                    style[p] = cs[p];\n                }\n            }\n            style.top = top;\n            style.left = left;\n        } else {\n            style.cssText = element._stOrig;\n        }\n        gsap.core.getCache(element).uncache = 1;\n        parent.appendChild(element);\n    }\n}, _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {\n    var last1 = initialValue, last2 = last1;\n    return function(value) {\n        var current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.\n        if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {\n            // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.\n            value = current;\n            onInterrupt && onInterrupt();\n        }\n        last2 = last1;\n        last1 = Math.round(value);\n        return last1;\n    };\n}, _shiftMarker = function _shiftMarker(marker, direction, value) {\n    var vars = {};\n    vars[direction.p] = \"+=\" + value;\n    gsap.set(marker, vars);\n}, // _mergeAnimations = animations => {\n// \tlet tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));\n// \tanimations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });\n// \ttl.smoothChildTiming = false;\n// \treturn tl;\n// },\n// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)\n_getTweenCreator = function _getTweenCreator(scroller, direction) {\n    var getScroll = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction), prop = \"_scroll\" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.\n    getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {\n        var tween = getTween.tween, onComplete = vars.onComplete, modifiers = {};\n        initialValue = initialValue || getScroll();\n        var checkForInterruption = _interruptionTracker(getScroll, initialValue, function() {\n            tween.kill();\n            getTween.tween = 0;\n        });\n        change2 = change1 && change2 || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.\n        change1 = change1 || scrollTo - initialValue;\n        tween && tween.kill();\n        vars[prop] = scrollTo;\n        vars.inherit = false;\n        vars.modifiers = modifiers;\n        modifiers[prop] = function() {\n            return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);\n        };\n        vars.onUpdate = function() {\n            _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;\n            getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()\n        };\n        vars.onComplete = function() {\n            getTween.tween = 0;\n            onComplete && onComplete.call(tween);\n        };\n        tween = getTween.tween = gsap.to(scroller, vars);\n        return tween;\n    };\n    scroller[prop] = getScroll;\n    getScroll.wheelHandler = function() {\n        return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);\n    };\n    _addListener(scroller, \"wheel\", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like \"3 lines per scroll\") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.\n    ScrollTrigger.isTouch && _addListener(scroller, \"touchmove\", getScroll.wheelHandler);\n    return getTween;\n};\nvar ScrollTrigger = /*#__PURE__*/ function() {\n    function ScrollTrigger(vars, animation) {\n        _coreInitted || ScrollTrigger.register(gsap) || console.warn(\"Please gsap.registerPlugin(ScrollTrigger)\");\n        _context(this);\n        this.init(vars, animation);\n    }\n    var _proto = ScrollTrigger.prototype;\n    _proto.init = function init(vars, animation) {\n        this.progress = this.start = 0;\n        this.vars && this.kill(true, true); // in case it's being initted again\n        if (!_enabled) {\n            this.update = this.refresh = this.kill = _passThrough;\n            return;\n        }\n        vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {\n            trigger: vars\n        } : vars, _defaults);\n        var _vars = vars, onUpdate = _vars.onUpdate, toggleClass = _vars.toggleClass, id = _vars.id, onToggle = _vars.onToggle, onRefresh = _vars.onRefresh, scrub = _vars.scrub, trigger = _vars.trigger, pin = _vars.pin, pinSpacing = _vars.pinSpacing, invalidateOnRefresh = _vars.invalidateOnRefresh, anticipatePin = _vars.anticipatePin, onScrubComplete = _vars.onScrubComplete, onSnapComplete = _vars.onSnapComplete, once = _vars.once, snap = _vars.snap, pinReparent = _vars.pinReparent, pinSpacer = _vars.pinSpacer, containerAnimation = _vars.containerAnimation, fastScrollEnd = _vars.fastScrollEnd, preventOverlaps = _vars.preventOverlaps, direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical, isToggle = !scrub && scrub !== 0, scroller = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.scroller || _win), scrollerCache = gsap.core.getCache(scroller), isViewport = _isViewport(scroller), useFixedPosition = (\"pinType\" in vars ? vars.pinType : (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"pinType\") || isViewport && \"fixed\") === \"fixed\", callbacks = [\n            vars.onEnter,\n            vars.onLeave,\n            vars.onEnterBack,\n            vars.onLeaveBack\n        ], toggleActions = isToggle && vars.toggleActions.split(\" \"), markers = \"markers\" in vars ? vars.markers : _defaults.markers, borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0, self = this, onRefreshInit = vars.onRefreshInit && function() {\n            return vars.onRefreshInit(self);\n        }, getScrollerSize = _getSizeFunc(scroller, isViewport, direction), getScrollerOffsets = _getOffsetsFunc(scroller, isViewport), lastSnap = 0, lastRefresh = 0, prevProgress = 0, scrollFunc = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction), tweenTo, pinCache, snapFunc, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars, executingOnRefresh, change, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacerState, markerStartSetter, pinMoves, markerEndSetter, cs, snap1, snap2, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, prevScroll, prevAnimProgress, caMarkerSetter, customRevertReturn; // for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start=\"clamp(top bottom)\" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.\n        self._startClamp = self._endClamp = false;\n        self._dir = direction;\n        anticipatePin *= 45;\n        self.scroller = scroller;\n        self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;\n        scroll1 = scrollFunc();\n        self.vars = vars;\n        animation = animation || vars.animation;\n        if (\"refreshPriority\" in vars) {\n            _sort = 1;\n            vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother\n        }\n        scrollerCache.tweenScroll = scrollerCache.tweenScroll || {\n            top: _getTweenCreator(scroller, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical),\n            left: _getTweenCreator(scroller, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal)\n        };\n        self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];\n        self.scrubDuration = function(value) {\n            scrubSmooth = _isNumber(value) && value;\n            if (!scrubSmooth) {\n                scrubTween && scrubTween.progress(1).kill();\n                scrubTween = 0;\n            } else {\n                scrubTween ? scrubTween.duration(value) : scrubTween = gsap.to(animation, {\n                    ease: \"expo\",\n                    totalProgress: \"+=0\",\n                    inherit: false,\n                    duration: scrubSmooth,\n                    paused: true,\n                    onComplete: function onComplete() {\n                        return onScrubComplete && onScrubComplete(self);\n                    }\n                });\n            }\n        };\n        if (animation) {\n            animation.vars.lazy = false;\n            animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010\n            self.animation = animation.pause();\n            animation.scrollTrigger = self;\n            self.scrubDuration(scrub);\n            snap1 = 0;\n            id || (id = animation.vars.id);\n        }\n        if (snap) {\n            // TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.\n            if (!_isObject(snap) || snap.push) {\n                snap = {\n                    snapTo: snap\n                };\n            }\n            \"scrollBehavior\" in _body.style && gsap.set(isViewport ? [\n                _body,\n                _docEl\n            ] : scroller, {\n                scrollBehavior: \"auto\"\n            }); // smooth scrolling doesn't work with snap.\n            _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function(o) {\n                return _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false);\n            }); // note: set smooth to false on both the vertical and horizontal scroll getters/setters\n            snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === \"labels\" ? _getClosestLabel(animation) : snap.snapTo === \"labelsDirectional\" ? _getLabelAtDirection(animation) : snap.directional !== false ? function(value, st) {\n                return _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction);\n            } : gsap.utils.snap(snap.snapTo);\n            snapDurClamp = snap.duration || {\n                min: 0.1,\n                max: 2\n            };\n            snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);\n            snapDelayedCall = gsap.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function() {\n                var scroll = scrollFunc(), refreshedRecently = _getTime() - lastRefresh < 500, tween = tweenTo.tween;\n                if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {\n                    var progress = (scroll - start) / change, totalProgress = animation && !isToggle ? animation.totalProgress() : progress, velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime() - _time2) * 1000 || 0, change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185), naturalEnd = progress + (snap.inertia === false ? 0 : change1), endValue, endScroll, _snap = snap, onStart = _snap.onStart, _onInterrupt = _snap.onInterrupt, _onComplete = _snap.onComplete;\n                    endValue = snapFunc(naturalEnd, self);\n                    _isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd\n                    endScroll = Math.max(0, Math.round(start + endValue * change));\n                    if (scroll <= end && scroll >= start && endScroll !== scroll) {\n                        if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {\n                            // there's an overlapping snap! So we must figure out which one is closer and let that tween live.\n                            return;\n                        }\n                        if (snap.inertia === false) {\n                            change1 = endValue - progress;\n                        }\n                        tweenTo(endScroll, {\n                            duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),\n                            ease: snap.ease || \"power3\",\n                            data: _abs(endScroll - scroll),\n                            // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.\n                            onInterrupt: function onInterrupt() {\n                                return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);\n                            },\n                            onComplete: function onComplete() {\n                                self.update();\n                                lastSnap = scrollFunc();\n                                if (animation && !isToggle) {\n                                    // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap\n                                    scrubTween ? scrubTween.resetTo(\"totalProgress\", endValue, animation._tTime / animation._tDur) : animation.progress(endValue);\n                                }\n                                snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;\n                                onSnapComplete && onSnapComplete(self);\n                                _onComplete && _onComplete(self);\n                            }\n                        }, scroll, change1 * change, endScroll - scroll - change1 * change);\n                        onStart && onStart(self, tweenTo.tween);\n                    }\n                } else if (self.isActive && lastSnap !== scroll) {\n                    snapDelayedCall.restart(true);\n                }\n            }).pause();\n        }\n        id && (_ids[id] = self);\n        trigger = self.trigger = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger || pin !== true && pin); // if a trigger has some kind of scroll-related effect applied that could contaminate the \"y\" or \"x\" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.\n        customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;\n        customRevertReturn && (customRevertReturn = customRevertReturn(self));\n        pin = pin === true ? trigger : (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pin);\n        _isString(toggleClass) && (toggleClass = {\n            targets: trigger,\n            className: toggleClass\n        });\n        if (pin) {\n            pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === \"flex\" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)\n            self.pin = pin;\n            pinCache = gsap.core.getCache(pin);\n            if (!pinCache.spacer) {\n                // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the \"original\" pin state after it has already been affected by another ScrollTrigger.\n                if (pinSpacer) {\n                    pinSpacer = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pinSpacer);\n                    pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular\n                    pinCache.spacerIsNative = !!pinSpacer;\n                    pinSpacer && (pinCache.spacerState = _getState(pinSpacer));\n                }\n                pinCache.spacer = spacer = pinSpacer || _doc.createElement(\"div\");\n                spacer.classList.add(\"pin-spacer\");\n                id && spacer.classList.add(\"pin-spacer-\" + id);\n                pinCache.pinState = pinOriginalState = _getState(pin);\n            } else {\n                pinOriginalState = pinCache.pinState;\n            }\n            vars.force3D !== false && gsap.set(pin, {\n                force3D: true\n            });\n            self.spacer = spacer = pinCache.spacer;\n            cs = _getComputedStyle(pin);\n            spacingStart = cs[pinSpacing + direction.os2];\n            pinGetter = gsap.getProperty(pin);\n            pinSetter = gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = \"hidden\"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).\n            _swapPinIn(pin, spacer, cs);\n            pinState = _getState(pin);\n        }\n        if (markers) {\n            markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;\n            markerStartTrigger = _createMarker(\"scroller-start\", id, scroller, direction, markerVars, 0);\n            markerEndTrigger = _createMarker(\"scroller-end\", id, scroller, direction, markerVars, 0, markerStartTrigger);\n            offset = markerStartTrigger[\"offset\" + direction.op.d2];\n            var content = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)((0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"content\") || scroller);\n            markerStart = this.markerStart = _createMarker(\"start\", id, content, direction, markerVars, offset, 0, containerAnimation);\n            markerEnd = this.markerEnd = _createMarker(\"end\", id, content, direction, markerVars, offset, 0, containerAnimation);\n            containerAnimation && (caMarkerSetter = gsap.quickSetter([\n                markerStart,\n                markerEnd\n            ], direction.a, _px));\n            if (!useFixedPosition && !(_Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.length && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, \"fixedMarkers\") === true)) {\n                _makePositionable(isViewport ? _body : scroller);\n                gsap.set([\n                    markerStartTrigger,\n                    markerEndTrigger\n                ], {\n                    force3D: true\n                });\n                markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);\n                markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);\n            }\n        }\n        if (containerAnimation) {\n            var oldOnUpdate = containerAnimation.vars.onUpdate, oldParams = containerAnimation.vars.onUpdateParams;\n            containerAnimation.eventCallback(\"onUpdate\", function() {\n                self.update(0, 0, 1);\n                oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);\n            });\n        }\n        self.previous = function() {\n            return _triggers[_triggers.indexOf(self) - 1];\n        };\n        self.next = function() {\n            return _triggers[_triggers.indexOf(self) + 1];\n        };\n        self.revert = function(revert, temp) {\n            if (!temp) {\n                return self.kill(true);\n            } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()\n            var r = revert !== false || !self.enabled, prevRefreshing = _refreshing;\n            if (r !== self.isReverted) {\n                if (r) {\n                    prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.\n                    prevProgress = self.progress;\n                    prevAnimProgress = animation && animation.progress();\n                }\n                markerStart && [\n                    markerStart,\n                    markerEnd,\n                    markerStartTrigger,\n                    markerEndTrigger\n                ].forEach(function(m) {\n                    return m.style.display = r ? \"none\" : \"block\";\n                });\n                if (r) {\n                    _refreshing = self;\n                    self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out\n                }\n                if (pin && (!pinReparent || !self.isActive)) {\n                    if (r) {\n                        _swapPinOut(pin, spacer, pinOriginalState);\n                    } else {\n                        _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);\n                    }\n                }\n                r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.\n                _refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.\n                self.isReverted = r;\n            }\n        };\n        self.refresh = function(soft, force, position, pinOffset) {\n            // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects\n            if ((_refreshing || !self.enabled) && !force) {\n                return;\n            }\n            if (pin && soft && _lastScrollTime) {\n                _addListener(ScrollTrigger, \"scrollEnd\", _softRefresh);\n                return;\n            }\n            !_refreshingAll && onRefreshInit && onRefreshInit(self);\n            _refreshing = self;\n            if (tweenTo.tween && !position) {\n                // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.\n                tweenTo.tween.kill();\n                tweenTo.tween = 0;\n            }\n            scrubTween && scrubTween.pause();\n            if (invalidateOnRefresh && animation) {\n                animation.revert({\n                    kill: false\n                }).invalidate();\n                animation.getChildren && animation.getChildren(true, true, false).forEach(function(t) {\n                    return t.vars.immediateRender && t.render(0, true, true);\n                }); // any from() or fromTo() tweens inside a timeline should render immediately (well, unless they have immediateRender: false)\n            }\n            self.isReverted || self.revert(true, true);\n            self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any\n            var size = getScrollerSize(), scrollerBounds = getScrollerOffsets(), max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction), isFirstRefresh = change <= 0.01 || !change, offset = 0, otherPinOffset = pinOffset || 0, parsedEnd = _isObject(position) ? position.end : vars.end, parsedEndTrigger = vars.endTrigger || trigger, parsedStart = _isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? \"0 0\" : \"0 100%\"), pinnedContainer = self.pinnedContainer = vars.pinnedContainer && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.pinnedContainer, self), triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0, i = triggerIndex, cs, bounds, scroll, isVertical, override, curTrigger, curPin, oppositeScroll, initted, revertedPins, forcedOverflow, markerStartOffset, markerEndOffset;\n            if (markers && _isObject(position)) {\n                // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.\n                markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);\n                markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);\n            }\n            while(i-- > 0){\n                // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things \"rewind\" properly.\n                curTrigger = _triggers[i];\n                curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.\n                curPin = curTrigger.pin;\n                if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {\n                    revertedPins || (revertedPins = []);\n                    revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly\n                    curTrigger.revert(true, true);\n                }\n                if (curTrigger !== _triggers[i]) {\n                    // in case it got removed.\n                    triggerIndex--;\n                    i--;\n                }\n            }\n            _isFunction(parsedStart) && (parsedStart = parsedStart(self));\n            parsedStart = _parseClamp(parsedStart, \"start\", self);\n            start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && \"_startClamp\") || (pin ? -0.001 : 0);\n            _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));\n            if (_isString(parsedEnd) && !parsedEnd.indexOf(\"+=\")) {\n                if (~parsedEnd.indexOf(\" \")) {\n                    parsedEnd = (_isString(parsedStart) ? parsedStart.split(\" \")[0] : \"\") + parsedEnd;\n                } else {\n                    offset = _offsetToPx(parsedEnd.substr(2), size);\n                    parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.\n                    parsedEndTrigger = trigger;\n                }\n            }\n            parsedEnd = _parseClamp(parsedEnd, \"end\", self);\n            end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? \"100% 0\" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && \"_endClamp\")) || -0.001;\n            offset = 0;\n            i = triggerIndex;\n            while(i--){\n                curTrigger = _triggers[i];\n                curPin = curTrigger.pin;\n                if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {\n                    cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);\n                    if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {\n                        // numeric start values shouldn't be offset at all - treat them as absolute\n                        offset += cs * (1 - curTrigger.progress);\n                    }\n                    curPin === pin && (otherPinOffset += cs);\n                }\n            }\n            start += offset;\n            end += offset;\n            self._startClamp && (self._startClamp += offset);\n            if (self._endClamp && !_refreshingAll) {\n                self._endClamp = end || -0.001;\n                end = Math.min(end, _maxScroll(scroller, direction));\n            }\n            change = end - start || (start -= 0.01) && 0.001;\n            if (isFirstRefresh) {\n                // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.\n                prevProgress = gsap.utils.clamp(0, 1, gsap.utils.normalize(start, end, prevScroll));\n            }\n            self._pinPush = otherPinOffset;\n            if (markerStart && offset) {\n                // offset the markers if necessary\n                cs = {};\n                cs[direction.a] = \"+=\" + offset;\n                pinnedContainer && (cs[direction.p] = \"-=\" + scrollFunc());\n                gsap.set([\n                    markerStart,\n                    markerEnd\n                ], cs);\n            }\n            if (pin && !(_clampingMax && self.end >= _maxScroll(scroller, direction))) {\n                cs = _getComputedStyle(pin);\n                isVertical = direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical;\n                scroll = scrollFunc(); // recalculate because the triggers can affect the scroll\n                pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;\n                if (!max && end > 1) {\n                    // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/\n                    forcedOverflow = (isViewport ? _doc.scrollingElement || _docEl : scroller).style;\n                    forcedOverflow = {\n                        style: forcedOverflow,\n                        value: forcedOverflow[\"overflow\" + direction.a.toUpperCase()]\n                    };\n                    if (isViewport && _getComputedStyle(_body)[\"overflow\" + direction.a.toUpperCase()] !== \"scroll\") {\n                        // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to \"scroll\"\n                        forcedOverflow.style[\"overflow\" + direction.a.toUpperCase()] = \"scroll\";\n                    }\n                }\n                _swapPinIn(pin, spacer, cs);\n                pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.\n                bounds = _getBounds(pin, true);\n                oppositeScroll = useFixedPosition && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, isVertical ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical)();\n                if (pinSpacing) {\n                    spacerState = [\n                        pinSpacing + direction.os2,\n                        change + otherPinOffset + _px\n                    ];\n                    spacerState.t = spacer;\n                    i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;\n                    if (i) {\n                        spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).\n                        spacer.style.flexBasis !== \"auto\" && (spacer.style.flexBasis = i + _px);\n                    }\n                    _setState(spacerState);\n                    if (pinnedContainer) {\n                        // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.\n                        _triggers.forEach(function(t) {\n                            if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {\n                                t._subPinOffset = true;\n                            }\n                        });\n                    }\n                    useFixedPosition && scrollFunc(prevScroll);\n                } else {\n                    i = _getSize(pin, direction);\n                    i && spacer.style.flexBasis !== \"auto\" && (spacer.style.flexBasis = i + _px);\n                }\n                if (useFixedPosition) {\n                    override = {\n                        top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,\n                        left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,\n                        boxSizing: \"border-box\",\n                        position: \"fixed\"\n                    };\n                    override[_width] = override[\"max\" + _Width] = Math.ceil(bounds.width) + _px;\n                    override[_height] = override[\"max\" + _Height] = Math.ceil(bounds.height) + _px;\n                    override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = \"0\";\n                    override[_padding] = cs[_padding];\n                    override[_padding + _Top] = cs[_padding + _Top];\n                    override[_padding + _Right] = cs[_padding + _Right];\n                    override[_padding + _Bottom] = cs[_padding + _Bottom];\n                    override[_padding + _Left] = cs[_padding + _Left];\n                    pinActiveState = _copyState(pinOriginalState, override, pinReparent);\n                    _refreshingAll && scrollFunc(0);\n                }\n                if (animation) {\n                    // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.\n                    initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.\n                    _suppressOverwrites(1);\n                    animation.render(animation.duration(), true, true);\n                    pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;\n                    pinMoves = Math.abs(change - pinChange) > 1;\n                    useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.\n                    animation.render(0, true, true);\n                    initted || animation.invalidate(true);\n                    animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.\n                    _suppressOverwrites(0);\n                } else {\n                    pinChange = change;\n                }\n                forcedOverflow && (forcedOverflow.value ? forcedOverflow.style[\"overflow\" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty(\"overflow-\" + direction.a));\n            } else if (trigger && scrollFunc() && !containerAnimation) {\n                // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()\n                bounds = trigger.parentNode;\n                while(bounds && bounds !== _body){\n                    if (bounds._pinOffset) {\n                        start -= bounds._pinOffset;\n                        end -= bounds._pinOffset;\n                    }\n                    bounds = bounds.parentNode;\n                }\n            }\n            revertedPins && revertedPins.forEach(function(t) {\n                return t.revert(false, true);\n            });\n            self.start = start;\n            self.end = end;\n            scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity\n            if (!containerAnimation && !_refreshingAll) {\n                scroll1 < prevScroll && scrollFunc(prevScroll);\n                self.scroll.rec = 0;\n            }\n            self.revert(false, true);\n            lastRefresh = _getTime();\n            if (snapDelayedCall) {\n                lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value\n                // self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.\n                snapDelayedCall.restart(true);\n            }\n            _refreshing = 0;\n            animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().\n            if (isFirstRefresh || prevProgress !== self.progress || containerAnimation || invalidateOnRefresh || animation && !animation._initted) {\n                // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.\n                animation && !isToggle && (animation._initted || prevProgress || animation.vars.immediateRender !== false) && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.\n                self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;\n            }\n            pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));\n            scrubTween && scrubTween.invalidate();\n            if (!isNaN(markerStartOffset)) {\n                // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like \"top\", \"center\", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.\n                markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);\n                markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);\n                _shiftMarker(markerStartTrigger, direction, markerStartOffset);\n                _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));\n                _shiftMarker(markerEndTrigger, direction, markerEndOffset);\n                _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));\n            }\n            isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a \"scroll\" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.\n            if (onRefresh && !_refreshingAll && !executingOnRefresh) {\n                // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.\n                executingOnRefresh = true;\n                onRefresh(self);\n                executingOnRefresh = false;\n            }\n        };\n        self.getVelocity = function() {\n            return (scrollFunc() - scroll2) / (_getTime() - _time2) * 1000 || 0;\n        };\n        self.endAnimation = function() {\n            _endAnimation(self.callbackAnimation);\n            if (animation) {\n                scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);\n            }\n        };\n        self.labelToScroll = function(label) {\n            return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;\n        };\n        self.getTrailing = function(name) {\n            var i = _triggers.indexOf(self), a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);\n            return (_isString(name) ? a.filter(function(t) {\n                return t.vars.preventOverlaps === name;\n            }) : a).filter(function(t) {\n                return self.direction > 0 ? t.end <= start : t.start >= end;\n            });\n        };\n        self.update = function(reset, recordVelocity, forceFake) {\n            if (containerAnimation && !forceFake && !reset) {\n                return;\n            }\n            var scroll = _refreshingAll === true ? prevScroll : self.scroll(), p = reset ? 0 : (scroll - start) / change, clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0, prevProgress = self.progress, isActive, wasActive, toggleState, action, stateChanged, toggled, isAtMax, isTakingAction;\n            if (recordVelocity) {\n                scroll2 = scroll1;\n                scroll1 = containerAnimation ? scrollFunc() : scroll;\n                if (snap) {\n                    snap2 = snap1;\n                    snap1 = animation && !isToggle ? animation.totalProgress() : clipped;\n                }\n            } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).\n            if (anticipatePin && pin && !_refreshing && !_startup && _lastScrollTime) {\n                if (!clipped && start < scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin) {\n                    clipped = 0.0001;\n                } else if (clipped === 1 && end > scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin) {\n                    clipped = 0.9999;\n                }\n            }\n            if (clipped !== prevProgress && self.enabled) {\n                isActive = self.isActive = !!clipped && clipped < 1;\n                wasActive = !!prevProgress && prevProgress < 1;\n                toggled = isActive !== wasActive;\n                stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)\n                self.direction = clipped > prevProgress ? 1 : -1;\n                self.progress = clipped;\n                if (stateChanged && !_refreshing) {\n                    toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.\n                    if (isToggle) {\n                        action = !toggled && toggleActions[toggleState + 1] !== \"none\" && toggleActions[toggleState + 1] || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the \"enter\" action, we should switch to the \"leave\" in this case (but only if one is defined)\n                        isTakingAction = animation && (action === \"complete\" || action === \"reset\" || action in animation);\n                    }\n                }\n                preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function(t) {\n                    return t.endAnimation();\n                }));\n                if (!isToggle) {\n                    if (scrubTween && !_refreshing && !_startup) {\n                        scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.\n                        if (scrubTween.resetTo) {\n                            scrubTween.resetTo(\"totalProgress\", clipped, animation._tTime / animation._tDur);\n                        } else {\n                            // legacy support (courtesy), before 3.10.0\n                            scrubTween.vars.totalProgress = clipped;\n                            scrubTween.invalidate().restart();\n                        }\n                    } else if (animation) {\n                        animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));\n                    }\n                }\n                if (pin) {\n                    reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);\n                    if (!useFixedPosition) {\n                        pinSetter(_round(pinStart + pinChange * clipped));\n                    } else if (stateChanged) {\n                        isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)\n                        if (pinReparent) {\n                            if (!reset && (isActive || isAtMax)) {\n                                var bounds = _getBounds(pin, true), _offset = scroll - start;\n                                _reparent(pin, _body, bounds.top + (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? _offset : 0) + _px, bounds.left + (direction === _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical ? 0 : _offset) + _px);\n                            } else {\n                                _reparent(pin, spacer);\n                            }\n                        }\n                        _setState(isActive || isAtMax ? pinActiveState : pinState);\n                        pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));\n                    }\n                }\n                snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);\n                toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function(el) {\n                    return el.classList[isActive || once ? \"add\" : \"remove\"](toggleClass.className);\n                }); // classes could affect positioning, so do it even if reset or refreshing is true.\n                onUpdate && !isToggle && !reset && onUpdate(self);\n                if (stateChanged && !_refreshing) {\n                    if (isToggle) {\n                        if (isTakingAction) {\n                            if (action === \"complete\") {\n                                animation.pause().totalProgress(1);\n                            } else if (action === \"reset\") {\n                                animation.restart(true).pause();\n                            } else if (action === \"restart\") {\n                                animation.restart(true);\n                            } else {\n                                animation[action]();\n                            }\n                        }\n                        onUpdate && onUpdate(self);\n                    }\n                    if (toggled || !_limitCallbacks) {\n                        // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.\n                        onToggle && toggled && _callback(self, onToggle);\n                        callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n                        once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0); // a callback shouldn't be called again if once is true.\n                        if (!toggled) {\n                            // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order\n                            toggleState = clipped === 1 ? 1 : 3;\n                            callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n                        }\n                    }\n                    if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {\n                        _endAnimation(self.callbackAnimation);\n                        scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === \"reverse\" ? 1 : !clipped, 1);\n                    }\n                } else if (isToggle && onUpdate && !_refreshing) {\n                    onUpdate(self);\n                }\n            } // update absolutely-positioned markers (only if the scroller isn't the viewport)\n            if (markerEndSetter) {\n                var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;\n                markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));\n                markerEndSetter(n);\n            }\n            caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));\n        };\n        self.enable = function(reset, refresh) {\n            if (!self.enabled) {\n                self.enabled = true;\n                _addListener(scroller, \"resize\", _onResize);\n                isViewport || _addListener(scroller, \"scroll\", _onScroll);\n                onRefreshInit && _addListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n                if (reset !== false) {\n                    self.progress = prevProgress = 0;\n                    scroll1 = scroll2 = lastSnap = scrollFunc();\n                }\n                refresh !== false && self.refresh();\n            }\n        };\n        self.getTween = function(snap) {\n            return snap && tweenTo ? tweenTo.tween : scrubTween;\n        };\n        self.setPositions = function(newStart, newEnd, keepClamp, pinOffset) {\n            // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()\n            if (containerAnimation) {\n                // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.\n                var st = containerAnimation.scrollTrigger, duration = containerAnimation.duration(), _change = st.end - st.start;\n                newStart = st.start + _change * newStart / duration;\n                newEnd = st.start + _change * newEnd / duration;\n            }\n            self.refresh(false, false, {\n                start: _keepClamp(newStart, keepClamp && !!self._startClamp),\n                end: _keepClamp(newEnd, keepClamp && !!self._endClamp)\n            }, pinOffset);\n            self.update();\n        };\n        self.adjustPinSpacing = function(amount) {\n            if (spacerState && amount) {\n                var i = spacerState.indexOf(direction.d) + 1;\n                spacerState[i] = parseFloat(spacerState[i]) + amount + _px;\n                spacerState[1] = parseFloat(spacerState[1]) + amount + _px;\n                _setState(spacerState);\n            }\n        };\n        self.disable = function(reset, allowAnimation) {\n            if (self.enabled) {\n                reset !== false && self.revert(true, true);\n                self.enabled = self.isActive = false;\n                allowAnimation || scrubTween && scrubTween.pause();\n                prevScroll = 0;\n                pinCache && (pinCache.uncache = 1);\n                onRefreshInit && _removeListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n                if (snapDelayedCall) {\n                    snapDelayedCall.pause();\n                    tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);\n                }\n                if (!isViewport) {\n                    var i = _triggers.length;\n                    while(i--){\n                        if (_triggers[i].scroller === scroller && _triggers[i] !== self) {\n                            return; //don't remove the listeners if there are still other triggers referencing it.\n                        }\n                    }\n                    _removeListener(scroller, \"resize\", _onResize);\n                    isViewport || _removeListener(scroller, \"scroll\", _onScroll);\n                }\n            }\n        };\n        self.kill = function(revert, allowAnimation) {\n            self.disable(revert, allowAnimation);\n            scrubTween && !allowAnimation && scrubTween.kill();\n            id && delete _ids[id];\n            var i = _triggers.indexOf(self);\n            i >= 0 && _triggers.splice(i, 1);\n            i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...\n            // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.\n            i = 0;\n            _triggers.forEach(function(t) {\n                return t.scroller === self.scroller && (i = 1);\n            });\n            i || _refreshingAll || (self.scroll.rec = 0);\n            if (animation) {\n                animation.scrollTrigger = null;\n                revert && animation.revert({\n                    kill: false\n                });\n                allowAnimation || animation.kill();\n            }\n            markerStart && [\n                markerStart,\n                markerEnd,\n                markerStartTrigger,\n                markerEndTrigger\n            ].forEach(function(m) {\n                return m.parentNode && m.parentNode.removeChild(m);\n            });\n            _primary === self && (_primary = 0);\n            if (pin) {\n                pinCache && (pinCache.uncache = 1);\n                i = 0;\n                _triggers.forEach(function(t) {\n                    return t.pin === pin && i++;\n                });\n                i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.\n            }\n            vars.onKill && vars.onKill(self);\n        };\n        _triggers.push(self);\n        self.enable(false, false);\n        customRevertReturn && customRevertReturn(self);\n        if (animation && animation.add && !change) {\n            // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If \"change\" is defined, we know it must be re-enabling, thus we can refresh() right away.\n            var updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().\n            self.update = function() {\n                self.update = updateFunc;\n                _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++; // otherwise a cached scroll position may get used in the refresh() in a very rare scenario, like if ScrollTriggers are created inside a DOMContentLoaded event and the queued requestAnimationFrame() fires beforehand. See https://gsap.com/community/forums/topic/41267-scrolltrigger-breaks-on-refresh-when-using-domcontentloaded/\n                start || end || self.refresh();\n            };\n            gsap.delayedCall(0.01, self.update);\n            change = 0.01;\n            start = end = 0;\n        } else {\n            self.refresh();\n        }\n        pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()\n    };\n    ScrollTrigger.register = function register(core) {\n        if (!_coreInitted) {\n            gsap = core || _getGSAP();\n            _windowExists() && window.document && ScrollTrigger.enable();\n            _coreInitted = _enabled;\n        }\n        return _coreInitted;\n    };\n    ScrollTrigger.defaults = function defaults(config) {\n        if (config) {\n            for(var p in config){\n                _defaults[p] = config[p];\n            }\n        }\n        return _defaults;\n    };\n    ScrollTrigger.disable = function disable(reset, kill) {\n        _enabled = 0;\n        _triggers.forEach(function(trigger) {\n            return trigger[kill ? \"kill\" : \"disable\"](reset);\n        });\n        _removeListener(_win, \"wheel\", _onScroll);\n        _removeListener(_doc, \"scroll\", _onScroll);\n        clearInterval(_syncInterval);\n        _removeListener(_doc, \"touchcancel\", _passThrough);\n        _removeListener(_body, \"touchstart\", _passThrough);\n        _multiListener(_removeListener, _doc, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n        _multiListener(_removeListener, _doc, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n        _resizeDelay.kill();\n        _iterateAutoRefresh(_removeListener);\n        for(var i = 0; i < _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3){\n            _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);\n            _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);\n        }\n    };\n    ScrollTrigger.enable = function enable() {\n        _win = window;\n        _doc = document;\n        _docEl = _doc.documentElement;\n        _body = _doc.body;\n        if (gsap) {\n            _toArray = gsap.utils.toArray;\n            _clamp = gsap.utils.clamp;\n            _context = gsap.core.context || _passThrough;\n            _suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;\n            _scrollRestoration = _win.history.scrollRestoration || \"auto\";\n            _lastScroll = _win.pageYOffset || 0;\n            gsap.core.globals(\"ScrollTrigger\", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a \"name\" property.\n            if (_body) {\n                _enabled = 1;\n                _div100vh = document.createElement(\"div\"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.\n                _div100vh.style.height = \"100vh\";\n                _div100vh.style.position = \"absolute\";\n                _refresh100vh();\n                _rafBugFix();\n                _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.register(gsap); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.\n                ScrollTrigger.isTouch = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch;\n                _fixIOSBug = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503\n                _ignoreMobileResize = _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch === 1;\n                _addListener(_win, \"wheel\", _onScroll); // mostly for 3rd party smooth scrolling libraries.\n                _root = [\n                    _win,\n                    _doc,\n                    _docEl,\n                    _body\n                ];\n                if (gsap.matchMedia) {\n                    ScrollTrigger.matchMedia = function(vars) {\n                        var mm = gsap.matchMedia(), p;\n                        for(p in vars){\n                            mm.add(p, vars[p]);\n                        }\n                        return mm;\n                    };\n                    gsap.addEventListener(\"matchMediaInit\", function() {\n                        return _revertAll();\n                    });\n                    gsap.addEventListener(\"matchMediaRevert\", function() {\n                        return _revertRecorded();\n                    });\n                    gsap.addEventListener(\"matchMedia\", function() {\n                        _refreshAll(0, 1);\n                        _dispatch(\"matchMedia\");\n                    });\n                    gsap.matchMedia().add(\"(orientation: portrait)\", function() {\n                        // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.\n                        _setBaseDimensions();\n                        return _setBaseDimensions;\n                    });\n                } else {\n                    console.warn(\"Requires GSAP 3.11.0 or later\");\n                }\n                _setBaseDimensions();\n                _addListener(_doc, \"scroll\", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!\n                var bodyHasStyle = _body.hasAttribute(\"style\"), bodyStyle = _body.style, border = bodyStyle.borderTopStyle, AnimationProto = gsap.core.Animation.prototype, bounds, i;\n                AnimationProto.revert || Object.defineProperty(AnimationProto, \"revert\", {\n                    value: function value() {\n                        return this.time(-0.01, true);\n                    }\n                }); // only for backwards compatibility (Animation.revert() was added after 3.10.4)\n                bodyStyle.borderTopStyle = \"solid\"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.\n                bounds = _getBounds(_body);\n                _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical.m = Math.round(bounds.top + _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding\n                _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal.m = Math.round(bounds.left + _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal.sc()) || 0;\n                border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty(\"border-top-style\");\n                if (!bodyHasStyle) {\n                    // SSR frameworks like Next.js complain if this attribute gets added.\n                    _body.setAttribute(\"style\", \"\"); // it's not enough to just removeAttribute() - we must first set it to empty, otherwise Next.js complains.\n                    _body.removeAttribute(\"style\");\n                } // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.\n                _syncInterval = setInterval(_sync, 250);\n                gsap.delayedCall(0.5, function() {\n                    return _startup = 0;\n                });\n                _addListener(_doc, \"touchcancel\", _passThrough); // some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document.\n                _addListener(_body, \"touchstart\", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n                _multiListener(_addListener, _doc, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n                _multiListener(_addListener, _doc, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n                _transformProp = gsap.utils.checkPrefix(\"transform\");\n                _stateProps.push(_transformProp);\n                _coreInitted = _getTime();\n                _resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();\n                _autoRefresh = [\n                    _doc,\n                    \"visibilitychange\",\n                    function() {\n                        var w = _win.innerWidth, h = _win.innerHeight;\n                        if (_doc.hidden) {\n                            _prevWidth = w;\n                            _prevHeight = h;\n                        } else if (_prevWidth !== w || _prevHeight !== h) {\n                            _onResize();\n                        }\n                    },\n                    _doc,\n                    \"DOMContentLoaded\",\n                    _refreshAll,\n                    _win,\n                    \"load\",\n                    _refreshAll,\n                    _win,\n                    \"resize\",\n                    _onResize\n                ];\n                _iterateAutoRefresh(_addListener);\n                _triggers.forEach(function(trigger) {\n                    return trigger.enable(0, 1);\n                });\n                for(i = 0; i < _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3){\n                    _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);\n                    _wheelListener(_removeListener, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);\n                }\n            }\n        }\n    };\n    ScrollTrigger.config = function config(vars) {\n        \"limitCallbacks\" in vars && (_limitCallbacks = !!vars.limitCallbacks);\n        var ms = vars.syncInterval;\n        ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);\n        \"ignoreMobileResize\" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);\n        if (\"autoRefreshEvents\" in vars) {\n            _iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || \"none\");\n            _ignoreResize = (vars.autoRefreshEvents + \"\").indexOf(\"resize\") === -1;\n        }\n    };\n    ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {\n        var t = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(target), i = _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.indexOf(t), isViewport = _isViewport(t);\n        if (~i) {\n            _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.splice(i, isViewport ? 6 : 2);\n        }\n        if (vars) {\n            isViewport ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(t, vars);\n        }\n    };\n    ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {\n        _triggers.forEach(function(t) {\n            return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);\n        });\n    };\n    ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {\n        var bounds = (_isString(element) ? (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element) : element).getBoundingClientRect(), offset = bounds[horizontal ? _width : _height] * ratio || 0;\n        return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;\n    };\n    ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {\n        _isString(element) && (element = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element));\n        var bounds = element.getBoundingClientRect(), size = bounds[horizontal ? _width : _height], offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf(\"%\") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;\n        return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;\n    };\n    ScrollTrigger.killAll = function killAll(allowListeners) {\n        _triggers.slice(0).forEach(function(t) {\n            return t.vars.id !== \"ScrollSmoother\" && t.kill();\n        });\n        if (allowListeners !== true) {\n            var listeners = _listeners.killAll || [];\n            _listeners = {};\n            listeners.forEach(function(f) {\n                return f();\n            });\n        }\n    };\n    return ScrollTrigger;\n}();\nScrollTrigger.version = \"3.13.0\";\nScrollTrigger.saveStyles = function(targets) {\n    return targets ? _toArray(targets).forEach(function(target) {\n        // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]\n        if (target && target.style) {\n            var i = _savedStyles.indexOf(target);\n            i >= 0 && _savedStyles.splice(i, 5);\n            _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute(\"transform\"), gsap.core.getCache(target), _context());\n        }\n    }) : _savedStyles;\n};\nScrollTrigger.revert = function(soft, media) {\n    return _revertAll(!soft, media);\n};\nScrollTrigger.create = function(vars, animation) {\n    return new ScrollTrigger(vars, animation);\n};\nScrollTrigger.refresh = function(safe) {\n    return safe ? _onResize(true) : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);\n};\nScrollTrigger.update = function(force) {\n    return ++_Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache && _updateAll(force === true ? 2 : 0);\n};\nScrollTrigger.clearScrollMemory = _clearScrollMemory;\nScrollTrigger.maxScroll = function(element, horizontal) {\n    return _maxScroll(element, horizontal ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n};\nScrollTrigger.getScrollFunc = function(element, horizontal) {\n    return (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)((0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element), horizontal ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n};\nScrollTrigger.getById = function(id) {\n    return _ids[id];\n};\nScrollTrigger.getAll = function() {\n    return _triggers.filter(function(t) {\n        return t.vars.id !== \"ScrollSmoother\";\n    });\n}; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.\nScrollTrigger.isScrolling = function() {\n    return !!_lastScrollTime;\n};\nScrollTrigger.snapDirectional = _snapDirectional;\nScrollTrigger.addEventListener = function(type, callback) {\n    var a = _listeners[type] || (_listeners[type] = []);\n    ~a.indexOf(callback) || a.push(callback);\n};\nScrollTrigger.removeEventListener = function(type, callback) {\n    var a = _listeners[type], i = a && a.indexOf(callback);\n    i >= 0 && a.splice(i, 1);\n};\nScrollTrigger.batch = function(targets, vars) {\n    var result = [], varsCopy = {}, interval = vars.interval || 0.016, batchMax = vars.batchMax || 1e9, proxyCallback = function proxyCallback(type, callback) {\n        var elements = [], triggers = [], delay = gsap.delayedCall(interval, function() {\n            callback(elements, triggers);\n            elements = [];\n            triggers = [];\n        }).pause();\n        return function(self) {\n            elements.length || delay.restart(true);\n            elements.push(self.trigger);\n            triggers.push(self);\n            batchMax <= elements.length && delay.progress(1);\n        };\n    }, p;\n    for(p in vars){\n        varsCopy[p] = p.substr(0, 2) === \"on\" && _isFunction(vars[p]) && p !== \"onRefreshInit\" ? proxyCallback(p, vars[p]) : vars[p];\n    }\n    if (_isFunction(batchMax)) {\n        batchMax = batchMax();\n        _addListener(ScrollTrigger, \"refresh\", function() {\n            return batchMax = vars.batchMax();\n        });\n    }\n    _toArray(targets).forEach(function(target) {\n        var config = {};\n        for(p in varsCopy){\n            config[p] = varsCopy[p];\n        }\n        config.trigger = target;\n        result.push(ScrollTrigger.create(config));\n    });\n    return result;\n}; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).\nvar _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {\n    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);\n    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;\n}, _allowNativePanning = function _allowNativePanning(target, direction) {\n    if (direction === true) {\n        target.style.removeProperty(\"touch-action\");\n    } else {\n        target.style.touchAction = direction === true ? \"auto\" : direction ? \"pan-\" + direction + (_Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch ? \" pinch-zoom\" : \"\") : \"none\"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.\n    }\n    target === _docEl && _allowNativePanning(_body, direction);\n}, _overflow = {\n    auto: 1,\n    scroll: 1\n}, _nestedScroll = function _nestedScroll(_ref5) {\n    var event = _ref5.event, target = _ref5.target, axis = _ref5.axis;\n    var node = (event.changedTouches ? event.changedTouches[0] : event).target, cache = node._gsap || gsap.core.getCache(node), time = _getTime(), cs;\n    if (!cache._isScrollT || time - cache._isScrollT > 2000) {\n        // cache for 2 seconds to improve performance.\n        while(node && node !== _body && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))){\n            node = node.parentNode;\n        }\n        cache._isScroll = node && node !== target && !_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);\n        cache._isScrollT = time;\n    }\n    if (cache._isScroll || axis === \"x\") {\n        event.stopPropagation();\n        event._gsapAllow = true;\n    }\n}, // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor\n_inputObserver = function _inputObserver(target, type, inputs, nested) {\n    return _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.create({\n        target: target,\n        capture: true,\n        debounce: false,\n        lockAxis: true,\n        type: type,\n        onWheel: nested = nested && _nestedScroll,\n        onPress: nested,\n        onDrag: nested,\n        onScroll: nested,\n        onEnable: function onEnable() {\n            return inputs && _addListener(_doc, _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, false, true);\n        },\n        onDisable: function onDisable() {\n            return _removeListener(_doc, _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, true);\n        }\n    });\n}, _inputExp = /(input|label|select|textarea)/i, _inputIsFocused, _captureInputs = function _captureInputs(e) {\n    var isInput = _inputExp.test(e.target.tagName);\n    if (isInput || _inputIsFocused) {\n        e._gsapAllow = true;\n        _inputIsFocused = isInput;\n    }\n}, _getScrollNormalizer = function _getScrollNormalizer(vars) {\n    _isObject(vars) || (vars = {});\n    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;\n    vars.type || (vars.type = \"wheel,touch\");\n    vars.debounce = !!vars.debounce;\n    vars.id = vars.id || \"normalizer\";\n    var _vars2 = vars, normalizeScrollX = _vars2.normalizeScrollX, momentum = _vars2.momentum, allowNestedScroll = _vars2.allowNestedScroll, onRelease = _vars2.onRelease, self, maxY, target = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.target) || _docEl, smoother = gsap.core.globals().ScrollSmoother, smootherInstance = smoother && smoother.get(), content = _fixIOSBug && (vars.content && (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()), scrollFuncY = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical), scrollFuncX = (0,_Observer_js__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal), scale = 1, initialScale = (_Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth, wheelRefresh = 0, resolveMomentumDuration = _isFunction(momentum) ? function() {\n        return momentum(self);\n    } : function() {\n        return momentum || 2.8;\n    }, lastRefreshID, skipTouchMove, inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll), resumeTouchMove = function resumeTouchMove() {\n        return skipTouchMove = false;\n    }, scrollClampX = _passThrough, scrollClampY = _passThrough, updateClamps = function updateClamps() {\n        maxY = _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical);\n        scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);\n        normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal)));\n        lastRefreshID = _refreshID;\n    }, removeContentOffset = function removeContentOffset() {\n        content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + \"px\";\n        content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + parseFloat(content._gsap.y) + \", 0, 1)\";\n        scrollFuncY.offset = scrollFuncY.cacheID = 0;\n    }, ignoreDrag = function ignoreDrag() {\n        if (skipTouchMove) {\n            requestAnimationFrame(resumeTouchMove);\n            var offset = _round(self.deltaY / 2), scroll = scrollClampY(scrollFuncY.v - offset);\n            if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {\n                scrollFuncY.offset = scroll - scrollFuncY.v;\n                var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);\n                content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + y + \", 0, 1)\";\n                content._gsap.y = y + \"px\";\n                scrollFuncY.cacheID = _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache;\n                _updateAll();\n            }\n            return true;\n        }\n        scrollFuncY.offset && removeContentOffset();\n        skipTouchMove = true;\n    }, tween, startScrollX, startScrollY, onStopDelayedCall, onResize = function onResize() {\n        // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.\n        updateClamps();\n        if (tween.isActive() && tween.vars.scrollY > maxY) {\n            scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo(\"scrollY\", maxY);\n        }\n    };\n    content && gsap.set(content, {\n        y: \"+=0\"\n    }); // to ensure there's a cache (element._gsap)\n    vars.ignoreCheck = function(e) {\n        return _fixIOSBug && e.type === \"touchmove\" && ignoreDrag(e) || scale > 1.05 && e.type !== \"touchstart\" || self.isGesturing || e.touches && e.touches.length > 1;\n    };\n    vars.onPress = function() {\n        skipTouchMove = false;\n        var prevScale = scale;\n        scale = _round((_win.visualViewport && _win.visualViewport.scale || 1) / initialScale);\n        tween.pause();\n        prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : \"x\");\n        startScrollX = scrollFuncX();\n        startScrollY = scrollFuncY();\n        updateClamps();\n        lastRefreshID = _refreshID;\n    };\n    vars.onRelease = vars.onGestureStart = function(self, wasDragging) {\n        scrollFuncY.offset && removeContentOffset();\n        if (!wasDragging) {\n            onStopDelayedCall.restart(true);\n        } else {\n            _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++; // make sure we're pulling the non-cached value\n            // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),\tdur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)\n            var dur = resolveMomentumDuration(), currentScroll, endScroll;\n            if (normalizeScrollX) {\n                currentScroll = scrollFuncX();\n                endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.\n                dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._horizontal));\n                tween.vars.scrollX = scrollClampX(endScroll);\n            }\n            currentScroll = scrollFuncY();\n            endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227; // the constant .227 is from power4(0.05)\n            dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__._vertical));\n            tween.vars.scrollY = scrollClampY(endScroll);\n            tween.invalidate().duration(dur).play(0.01);\n            if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {\n                // iOS bug: it'll show the address bar but NOT fire the window \"resize\" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.\n                gsap.to({}, {\n                    onUpdate: onResize,\n                    duration: dur\n                });\n            }\n        }\n        onRelease && onRelease(self);\n    };\n    vars.onWheel = function() {\n        tween._ts && tween.pause();\n        if (_getTime() - wheelRefresh > 1000) {\n            // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.\n            lastRefreshID = 0;\n            wheelRefresh = _getTime();\n        }\n    };\n    vars.onChange = function(self, dx, dy, xArray, yArray) {\n        _refreshID !== lastRefreshID && updateClamps();\n        dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.\n        if (dy) {\n            scrollFuncY.offset && removeContentOffset();\n            var isTouch = yArray[2] === dy, y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1], yClamped = scrollClampY(y);\n            isTouch && y !== yClamped && (startScrollY += yClamped - y);\n            scrollFuncY(yClamped);\n        }\n        (dy || dx) && _updateAll();\n    };\n    vars.onEnable = function() {\n        _allowNativePanning(target, normalizeScrollX ? false : \"x\");\n        ScrollTrigger.addEventListener(\"refresh\", onResize);\n        _addListener(_win, \"resize\", onResize);\n        if (scrollFuncY.smooth) {\n            scrollFuncY.target.style.scrollBehavior = \"auto\";\n            scrollFuncY.smooth = scrollFuncX.smooth = false;\n        }\n        inputObserver.enable();\n    };\n    vars.onDisable = function() {\n        _allowNativePanning(target, true);\n        _removeListener(_win, \"resize\", onResize);\n        ScrollTrigger.removeEventListener(\"refresh\", onResize);\n        inputObserver.kill();\n    };\n    vars.lockAxis = vars.lockAxis !== false;\n    self = new _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);\n    self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.\n    _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.\n    _fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping\n    onStopDelayedCall = self._dc;\n    tween = gsap.to(self, {\n        ease: \"power4\",\n        paused: true,\n        inherit: false,\n        scrollX: normalizeScrollX ? \"+=0.1\" : \"+=0\",\n        scrollY: \"+=0.1\",\n        modifiers: {\n            scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function() {\n                return tween.pause();\n            })\n        },\n        onUpdate: _updateAll,\n        onComplete: onStopDelayedCall.vars.onComplete\n    }); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.\n    return self;\n};\nScrollTrigger.sort = function(func) {\n    if (_isFunction(func)) {\n        return _triggers.sort(func);\n    }\n    var scroll = _win.pageYOffset || 0;\n    ScrollTrigger.getAll().forEach(function(t) {\n        return t._sortY = t.trigger ? scroll + t.trigger.getBoundingClientRect().top : t.start + _win.innerHeight;\n    });\n    return _triggers.sort(func || function(a, b) {\n        return (a.vars.refreshPriority || 0) * -1e6 + (a.vars.containerAnimation ? 1e6 : a._sortY) - ((b.vars.containerAnimation ? 1e6 : b._sortY) + (b.vars.refreshPriority || 0) * -1e6);\n    }); // anything with a containerAnimation should refresh last.\n};\nScrollTrigger.observe = function(vars) {\n    return new _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);\n};\nScrollTrigger.normalizeScroll = function(vars) {\n    if (typeof vars === \"undefined\") {\n        return _normalizer;\n    }\n    if (vars === true && _normalizer) {\n        return _normalizer.enable();\n    }\n    if (vars === false) {\n        _normalizer && _normalizer.kill();\n        _normalizer = vars;\n        return;\n    }\n    var normalizer = vars instanceof _Observer_js__WEBPACK_IMPORTED_MODULE_0__.Observer ? vars : _getScrollNormalizer(vars);\n    _normalizer && _normalizer.target === normalizer.target && _normalizer.kill();\n    _isViewport(normalizer.target) && (_normalizer = normalizer);\n    return normalizer;\n};\nScrollTrigger.core = {\n    // smaller file size way to leverage in ScrollSmoother and Observer\n    _getVelocityProp: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._getVelocityProp,\n    _inputObserver: _inputObserver,\n    _scrollers: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._scrollers,\n    _proxies: _Observer_js__WEBPACK_IMPORTED_MODULE_0__._proxies,\n    bridge: {\n        // when normalizeScroll sets the scroll position (ss = setScroll)\n        ss: function ss() {\n            _lastScrollTime || _dispatch(\"scrollStart\");\n            _lastScrollTime = _getTime();\n        },\n        // a way to get the _refreshing value in Observer\n        ref: function ref() {\n            return _refreshing;\n        }\n    }\n};\n_getGSAP() && gsap.registerPlugin(ScrollTrigger);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/ScrollTrigger.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/ServicesSection.tsx":
/*!********************************************!*\
  !*** ./src/components/ServicesSection.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ServicesSection; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"(app-pages-browser)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap */ \"(app-pages-browser)/./node_modules/gsap/index.js\");\n/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap/ScrollTrigger */ \"(app-pages-browser)/./node_modules/gsap/ScrollTrigger.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n// Register ScrollTrigger plugin\nif (true) {\n    gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_4__.ScrollTrigger);\n}\nconst services = [\n    {\n        title: \"Bimbingan Penulisan Naskah\",\n        desc: \"Skripsi, artikel jurnal, esai, disertasi, dll.\",\n        icon: \"/images/icons/suitcase.png\",\n        color: \"from-blue-500 to-purple-600\",\n        bgColor: \"bg-blue-50\"\n    },\n    {\n        title: \"Pendampingan Publikasi Ilmiah\",\n        desc: \"Submit & revisi untuk SINTA, Scopus, WoS.\",\n        icon: \"/images/icons/book.png\",\n        color: \"from-green-500 to-blue-600\",\n        bgColor: \"bg-green-50\"\n    },\n    {\n        title: \"Event Organizer Workshop Akademik\",\n        desc: \"Webinar, kuliah tamu, pelatihan menulis, dll.\",\n        icon: \"/images/icons/video-conference.png\",\n        color: \"from-orange-500 to-red-600\",\n        bgColor: \"bg-orange-50\"\n    }\n];\nfunction ServicesSection() {\n    _s();\n    const sectionRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const titleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const cardsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const ctx = gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.context(()=>{\n            // Set initial states\n            gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.set(titleRef.current, {\n                opacity: 0,\n                y: 50\n            });\n            gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.set(cardsRef.current, {\n                opacity: 0,\n                y: 80,\n                scale: 0.8\n            });\n            // Create ScrollTrigger animation\n            gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.timeline({\n                scrollTrigger: {\n                    trigger: sectionRef.current,\n                    start: \"top 80%\",\n                    end: \"bottom 20%\",\n                    toggleActions: \"play none none reverse\"\n                }\n            }).to(titleRef.current, {\n                opacity: 1,\n                y: 0,\n                duration: 1,\n                ease: \"power3.out\"\n            }).to(cardsRef.current, {\n                opacity: 1,\n                y: 0,\n                scale: 1,\n                duration: 0.8,\n                stagger: 0.2,\n                ease: \"back.out(1.7)\"\n            }, \"-=0.3\");\n            // Add hover animations for cards\n            cardsRef.current.forEach((card, index)=>{\n                if (card) {\n                    const icon = card.querySelector(\".service-icon\");\n                    const content = card.querySelector(\".service-content\");\n                    card.addEventListener(\"mouseenter\", ()=>{\n                        gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.to(card, {\n                            y: -10,\n                            scale: 1.05,\n                            duration: 0.3,\n                            ease: \"power2.out\"\n                        });\n                        gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.to(icon, {\n                            rotation: 360,\n                            scale: 1.2,\n                            duration: 0.6,\n                            ease: \"back.out(1.7)\"\n                        });\n                    });\n                    card.addEventListener(\"mouseleave\", ()=>{\n                        gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.to(card, {\n                            y: 0,\n                            scale: 1,\n                            duration: 0.3,\n                            ease: \"power2.out\"\n                        });\n                        gsap__WEBPACK_IMPORTED_MODULE_3__.gsap.to(icon, {\n                            rotation: 0,\n                            scale: 1,\n                            duration: 0.3,\n                            ease: \"power2.out\"\n                        });\n                    });\n                }\n            });\n        }, sectionRef);\n        return ()=>ctx.revert();\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        ref: sectionRef,\n        id: \"layanan\",\n        className: \"py-20 bg-gradient-to-br from-gray-50 to-blue-50 relative overflow-hidden\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 pointer-events-none\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute top-20 left-20 w-32 h-32 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full opacity-5\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                        lineNumber: 118,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute bottom-20 right-20 w-24 h-24 bg-gradient-to-br from-green-400 to-blue-500 rounded-full opacity-5\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                        lineNumber: 119,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute top-40 right-40 w-16 h-16 bg-gradient-to-br from-orange-400 to-red-500 transform rotate-45 opacity-5\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                        lineNumber: 120,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                lineNumber: 117,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"max-w-7xl mx-auto px-4 relative z-10\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        ref: titleRef,\n                        className: \"text-4xl lg:text-5xl font-bold text-center mb-16 text-gray-900\",\n                        children: [\n                            \"Jelajahi \",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"text-blue-600\",\n                                children: \"Layanan\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                lineNumber: 125,\n                                columnNumber: 20\n                            }, this),\n                            \" Kami\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                        lineNumber: 124,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"grid grid-cols-1 md:grid-cols-3 gap-8\",\n                        children: services.map((service, idx)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                ref: (el)=>cardsRef.current[idx] = el,\n                                className: \"\".concat(service.bgColor, \" p-8 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 cursor-pointer group relative overflow-hidden\"),\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"absolute inset-0 bg-gradient-to-br \".concat(service.color, \" opacity-0 group-hover:opacity-10 transition-opacity duration-300\")\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                        lineNumber: 136,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"service-content relative z-10 flex flex-col items-center text-center\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"service-icon mb-6 p-4 bg-white rounded-full shadow-md\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                                    src: service.icon,\n                                                    alt: service.title,\n                                                    width: 48,\n                                                    height: 48,\n                                                    className: \"w-12 h-12\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                                    lineNumber: 140,\n                                                    columnNumber: 19\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                                lineNumber: 139,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                className: \"text-xl font-bold mb-4 text-gray-900 group-hover:text-blue-700 transition-colors duration-300\",\n                                                children: service.title\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                                lineNumber: 149,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-gray-600 leading-relaxed group-hover:text-gray-700 transition-colors duration-300\",\n                                                children: service.desc\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                                lineNumber: 153,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"mt-6 opacity-0 group-hover:opacity-100 transition-opacity duration-300\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                    className: \"w-6 h-6 text-blue-600\",\n                                                    fill: \"none\",\n                                                    stroke: \"currentColor\",\n                                                    viewBox: \"0 0 24 24\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                        strokeLinecap: \"round\",\n                                                        strokeLinejoin: \"round\",\n                                                        strokeWidth: 2,\n                                                        d: \"M17 8l4 4m0 0l-4 4m4-4H3\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                                        lineNumber: 160,\n                                                        columnNumber: 21\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                                    lineNumber: 159,\n                                                    columnNumber: 19\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                                lineNumber: 158,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                        lineNumber: 138,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"absolute top-4 right-4 w-2 h-2 bg-blue-400 rounded-full opacity-30\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                        lineNumber: 166,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"absolute bottom-4 left-4 w-1 h-1 bg-purple-400 rounded-full opacity-40\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                        lineNumber: 167,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, idx, true, {\n                                fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                                lineNumber: 130,\n                                columnNumber: 13\n                            }, this))\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                        lineNumber: 128,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n                lineNumber: 123,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\ainan\\\\OneDrive\\\\Documents\\\\elevate\\\\src\\\\components\\\\ServicesSection.tsx\",\n        lineNumber: 115,\n        columnNumber: 5\n    }, this);\n}\n_s(ServicesSection, \"UrabrZxBW3uv4z9PKRR+dxgfIdk=\");\n_c = ServicesSection;\nvar _c;\n$RefreshReg$(_c, \"ServicesSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/ServicesSection.tsx\n"));

/***/ })

});